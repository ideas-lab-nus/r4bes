[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"index.html","id":"introduction","chapter":"Preface","heading":"Introduction","text":"book module PF4213–Building Energy Analysis Simulation Department Built Environment, National University Singapore. book introduce building energy simulation perform data analytics energy models using R. learn get model R, simulate , transform inputs outputs, visualize explore . book designed interactive learn . highly recommended copy paste code book instead type . Copying pasting snippets code isn’t best way learn often just reading code abstract level without understanding . contrast, typing code forces try understand code .online version book free use, licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Note book still work progress chapters book currently just placeholders completed time.","code":""},{"path":"index.html","id":"structure-of-this-book","chapter":"Preface","heading":"Structure of this book","text":"book divided six parts. code chapter self-containing. chapter contain packages objects needed run code objects created previous chapters need carried work.Part introduces R’s basic syntax, sufficient get readers started subsequent parts book. Part II introduces basic usage show get EnergyPlus model R, run simulation, extract predefined reports visuaize . Part III provide details extracting modifying various model inputs/outputs, provide examples data exploration can applied model inputs/outputs. Part IV shows programmatically define energy efficient measures using functions demonstrates process performing parametric simulation ’s analysis. Part V shows example application advanced techniques sensitivity analysis, optimization, Bayesian calibration building energy simulation. Part VI introduces workflows tools reproducing building energy simulation using R.","code":""},{"path":"index.html","id":"prerequisites","chapter":"Preface","heading":"Prerequisites","text":"book assumes theoretical knowledge building physics building energy simulation. programming experience preferred necessary. run code book, need install EnergyPlus, R, RStudio, handful R packages introduce go along book.","code":""},{"path":"index.html","id":"r-and-rstudio","chapter":"Preface","heading":"R and RStudio","text":"download install recent version R, recommend precompiled binary distribution base system contributed packages find top R’s project webpage https://cloud.r-project.org. R Studio Integrated Development Environment (IDE) R.R Studio increases productivity working R programming language combining different features syntax highlighting auto-completion single application. can download install RStudio https://www.rstudio.com/products/rstudio/download.downloaded installed RStudio, see similar window shown image comprises :Console window: window type R code, press enter, results returned.Console window: window type R code, press enter, results returned.Workspace window: Environment tab window objects created show.Workspace window: Environment tab window objects created show.Results window: window typically used visualizing graphs (Plots tab) getting help accessing documentation pages R (Help tab).Results window: window typically used visualizing graphs (Plots tab) getting help accessing documentation pages R (Help tab).","code":""},{"path":"index.html","id":"r-packages","chapter":"Preface","heading":"R Packages","text":"R thousands packages hosted Comprehensive R Archieve Network (CRAN). packages contains functions developed shared community. book using several R packages. main packages include tidyverse eplusr package. introduce packages used book go along.install R package, open R Studio typeFor example, install tidyverse packageNote able use R package load environment using library() function. load tidyverse package, type","code":"\ninstall.packages(\"<package name>\")\ninstall.packages(\"tidyverse\")\nlibrary(\"tidyverse\")\nlibrary(\"eplusr\")"},{"path":"index.html","id":"energyplus","chapter":"Preface","heading":"EnergyPlus","text":"EnergyPlus open-source whole-building energy simulation engine widely used research community industry practitioners. EnergyPlus also simulation engine supporting many energy simulation applications [1], continues supported U.S. Department Energy (DOE) [2].Different releases EnergyPlus different platforms (Windows, Linus, Mac) can downloaded https://energyplus.net/downloads. book, using EnergyPlus version 9.4.0.can also install EnergyPlus via RStudio using eplusr package. First, install eplusrThen load library onto RStudioYou can install EnergyPlus version 9.4.0 typing","code":"\ninstall.packages(\"eplusr\")\nlibrary(eplusr)\ninstall_eplus(ver = 9.4)"},{"path":"index.html","id":"conventions","chapter":"Preface","heading":"Conventions","text":"book, code can type run directly R appear within grey boxes like form code blocks like :presenting R code, prompts > added output running code commented ## shown example . convenience easy type copy code can run .","code":"\n1 + 1\n## [1] 2"},{"path":"index.html","id":"before-you-begin","chapter":"Preface","heading":"Before you begin","text":"","code":""},{"path":"index.html","id":"r-project","chapter":"Preface","heading":"R Project","text":"Figure shows steps create project called r4bes using book. create project, select File > New Project RStudio’s menu bar. launches window provides options creating project. Select New Directory option followed New Project. can specify Directory name new project directory reside. Notice file .Rproj extension created along project. project file double-click open project. open project, current working directory automatically set project directory.Try now! Quite RStuido navigate open r4bes.Rproj file.","code":""},{"path":"index.html","id":"scripting","chapter":"Preface","heading":"Scripting","text":"project folder set , can create new R Script File > New File > R Script. R Script basically text file .R extension allows keep track save R code.","code":""},{"path":"index.html","id":"example-files","chapter":"Preface","heading":"Example files","text":"ensure reproducibility examples book, download data folder link place project folder just created.project folder now following file structure.building_meter.csv example energy meter output file U.S. DOE medium office energy model (.e., RefBldgMediumOfficeNew2004_Chicago.idf). dataset temporal resolution 1 hour comprises 10 variables (Date/Time 9 energy meters) 8760 observations.building.csv timeseries dataset actual building consisting 1324 observations 2 variables (date/time building electricity consumption). dataset temporal resolution 30 minutes.USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw latest Typical Meteorological Year weather dataset Chicago Ohare International Airport.RefBldgMediumOfficeNew2004_Chicago.idf building energy model developed U.S. Department Energy (DOE) act Commercial Reference Building medium offices [3]. use DOE reference building well established widely used. importantly, publicly available comes distributed EnergyPlus example files, making examples code book easier follow reproduce.iris.csv popular machine learning dataset Iris flower. dataset consists 50 observations 5 variables.downloaded data folder R project directure, following code return TRUE.","code":"\n./r4bes/\n  +-- r4bes.Rproj\n  +-- data/\n      +-- building_meter.csv\n      +-- building.csv\n      +-- epw\n          +-- USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\n      +-- idf\n          +-- RefBldgMediumOfficeNew2004_Chicago.idf\n      +-- iris.csv\nlibrary(\"here\")\n## here() starts at /Users/adrianchong/Documents/GitHub/r4bes\n\nfile.exists(here(\"data\", \"iris.csv\"))\n## [1] TRUE\nfile.exists(here(\"data\", \"building.csv\"))\n## [1] TRUE\nfile.exists(here(\"data\", \"building_meter.csv\"))\n## [1] TRUE\nfile.exists(here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\"))\n## [1] TRUE\nfile.exists(here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\"))\n## [1] TRUE"},{"path":"index.html","id":"project-structure","chapter":"Preface","heading":"Project structure","text":"also create new folder called R newly created R project. folder used house R code write go book. can create new folder RStudio navigating RStudio’s results window, select Files tab click New Folder enter R.project folder now look like .","code":""},{"path":"index.html","id":"style-guide","chapter":"Preface","heading":"Style guide","text":"recommend using Tidyverse Style Guide Hadley Wickham. summarize recommend followingR File names meaningful end .R. Avoid using special characters naming files use lowercase, hyphens -, underscores _.snake_case (lowercase letters, numbers, _) object function names. Function names also reflect .Use two white spaces indenting codeLine length exceed 80 characters","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"1 Introduction","heading":"1 Introduction","text":"part book intended provide sufficient introduction R get started subsequent parts book. comprehensive treatment subject, recommend R Data Science Hadley Wickham & Garrett Grolemund [4]. R Graphics Cookbook Winston Chang [5] also useful reference provides recipes allows quickly generate plots R using ggplot2 package.","code":""},{"path":"basics.html","id":"basics","chapter":"2 Basics","heading":"2 Basics","text":"","code":""},{"path":"basics.html","id":"prerequisites-1","chapter":"2 Basics","heading":"2.1 Prerequisites","text":"introduce basics R programming chapter. review basic operators data types chapter. also provide introduction basic R data structures (including tibbles data tables).chapter involves working R basic operators data types, require extra packages. also introduce tibble package, forms part tidyverse package section 2.5, data.table package section 2.6","code":"\nlibrary(tidyverse)\nlibrary(data.table)"},{"path":"basics.html","id":"basic-operators","chapter":"2 Basics","heading":"2.2 Basic operators","text":"Basic arithmetic operators (+, -, *, /, ^, `%’) work like calculatorR uses <- operator assignments. can read following code assigning outcome 2 + 3, 5, 3 object value_a,value_b, value_c respectively, stores later use.can print stored object console withYou can use relational operators compare one object relates another.can use logical operators connect two expressions. example, connect results comparisons made using relational operators.Note logical && || examines first element vector.perform element-wise logical operations, use & | instead","code":"\n3 + 2 # addition\n## [1] 5\n3 - 2 # subtraction\n## [1] 1\n3 * 2 # multiplication\n## [1] 6\n3 / 2 # division\n## [1] 1.5\n3^2 # exponent\n## [1] 9\n3 %/% 2 # integer division\n## [1] 1\n3 %% 2 # mod (remainder of a division)\n## [1] 1\nvalue_a <- 2 + 3\nvalue_b <- 5\nvalue_c <- 3\nprint(value_a)\n## [1] 5\n2 + 3 == 5 # TRUE that 2 + 3 equals 5\n## [1] TRUE\n2 + 3 != 5 # FALSE that 2 + 3 not equals to 5\n## [1] FALSE\n2 + 3 < 3 # FASLE that 2 + 3 is less than 3\n## [1] FALSE\n2 + 3 > 3 # TRUE that 2 + 3 is more than 3\n## [1] TRUE\n2 + 3 <= 5 # TRUE that 2 + 3 is less than or equal to 5\n## [1] TRUE\n2 + 3 >= 5 # TRUE that 2 + 3 is more than or equal to 5\n## [1] TRUE\n(2 + 3 == 5) && (2 + 3 < 3) # logical AND operator\n## [1] FALSE\n(2 + 3 == 5) || (2 + 3 >= 3) # logical OR operator\n## [1] TRUE\nx <- c(TRUE, TRUE, FALSE)\ny <- c(FALSE, TRUE, FALSE)\nx && y\n## [1] FALSE\nx || y\n## [1] TRUE\nx & y\n## [1] FALSE  TRUE FALSE\nx | y\n## [1]  TRUE  TRUE FALSE\n!y\n## [1]  TRUE FALSE  TRUE"},{"path":"basics.html","id":"basic-data-types","chapter":"2 Basics","heading":"2.3 Basic data types","text":"basic data types (also known atomic data types) R order use .can use function class() find class object R.","code":"\nvar_a <- 1\nclass(var_a)\n## [1] \"numeric\"\n\nvar_b <- 1L\nclass(var_b)\n## [1] \"integer\"\n\nvar_c <- \"R for BES\"\nclass(var_c)\n## [1] \"character\""},{"path":"basics.html","id":"basic-data-structures","chapter":"2 Basics","heading":"2.4 Basic data structures","text":"basic data structures R include factors, atomic vectors, lists, matrices, data.framesFactors used R represent categorical variables. Although appear similar character vectors actually stored integers. can use function levels() output categorical variables nlevels() check number categorical variables.Atomic vectors frequently referred vectors data structure used store multiple objects data type (logical, numeric, integer, character, complex, raw). Vectors one-indexed (.e., first element indexed using [1]) can get number elements vector using function length().Lists ordered data structure used store multiple R objects different types. function list() used create list list R can accessed using single [] double brackets [[]]. Using [] returns list selected element using [[]] returns selected element. Using function length(), can obtain number objects list.named elements list, also access specifying names brackets using $ operator.matrix two dimensional data structure used store multiple objects. can use function matrix() create matrix using ncol nrow argument specify number columns rows respectively, byrow argument specify data ordered.Aside numeric data types, matrix can also used store data types long homogeneous. store heterogeneous data types, use data frame introduced next.data.frame two-dimensional data structures used store heterogeneous data types R. result ’s convenience, data frames commonly used data structure R. can use function data.frame() create data frame.","code":"\neye_color <- factor(c(\"brown\", \"black\", \"green\", \"brown\", \"black\", \"blue\"))\nnlevels(eye_color)\n## [1] 4\nlevels(eye_color)\n## [1] \"black\" \"blue\"  \"brown\" \"green\"\nvec_num <- c(1, 2, 3, 4)\nclass(vec_num)\n## [1] \"numeric\"\n\nvec_char <- c(\"R\", \"for\", \"BES\")\nclass(vec_char)\n## [1] \"character\"\n\n# coercion if data types are mixed\nvec_mix <- c(\"R\", 4, \"BES\")\nclass(vec_mix)\n## [1] \"character\"\n\n# you can easily combine vectors using the c function\nc(vec_char, vec_mix)\n## [1] \"R\"   \"for\" \"BES\" \"R\"   \"4\"   \"BES\"\n\n# vector length\nlength(vec_num)\n## [1] 4\n\n# access first element of vector\nvec_num[1]\n## [1] 1\nmy_list <- list(\n  c(1, 2, 3, 4),\n  c(\"a\", \"b\"),\n  1L,\n  matrix(1:9, ncol = 3)\n)\n\nmy_list_a <- my_list[1]\nclass(my_list_a)\n## [1] \"list\"\n\nmy_list_b <- my_list[[1]]\nclass(my_list_b)\n## [1] \"numeric\"\n\nlength(my_list)\n## [1] 4\nnamed_list <- list(\n  a = c(1, 2, 3, 4),\n  b = c(\"a\", \"b\"),\n  c = 1L,\n  d = matrix(1:9, ncol = 3)\n)\n\nclass(named_list[\"a\"])\n## [1] \"list\"\n\nclass(named_list[[\"a\"]])\n## [1] \"numeric\"\n\nclass(named_list$a)\n## [1] \"numeric\"\nmatrix(1:12, ncol = 3, byrow = FALSE)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nmatrix(1:12, nrow = 3, byrow = FALSE)\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    4    7   10\n## [2,]    2    5    8   11\n## [3,]    3    6    9   12\n\nmatrix(1:12, ncol = 3, byrow = TRUE)\n##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\n## [3,]    7    8    9\n## [4,]   10   11   12\nmatrix(c(\"brown\", \"black\", \"green\", \"brown\", \"black\", \"blue\"), ncol = 2)\n##      [,1]    [,2]   \n## [1,] \"brown\" \"brown\"\n## [2,] \"black\" \"black\"\n## [3,] \"green\" \"blue\"\n\nmatrix(c(\"TRUE\", \"TRUE\", \"FALSE\", \"FALSE\"), ncol = 2)\n##      [,1]   [,2]   \n## [1,] \"TRUE\" \"FALSE\"\n## [2,] \"TRUE\" \"FALSE\"\n\nmatrix(c(1L, 2L, 3L, 4L), ncol = 2)\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\ndf <- data.frame(\n  x = c(1, 2, 3),\n  y = c(\"red\", \"green\", \"blue\"),\n  z = c(TRUE, FALSE, TRUE)\n)"},{"path":"basics.html","id":"tibbles","chapter":"2 Basics","heading":"2.5 Tibbles","text":"Tibbles basically modified version R’s data.frame. can create tibble using function tibble(). Alternatively, can coerce data frame tibble using as_tibble()key difference lies tibbles printed. Printing tibble results first ten rows displayed explicit reporting column’s data type.Unlike data.frame, tibbles provides clarity data structure returns. indexing tibbles, [ always return another tibble [[ $ alway returns vector. contrast, single column data frames often converted atomic vectors R unless drop = FALSE specified.Additionally, tibbles partial matching raises warning unless variable specified exact match.can read tibbles typing vignette(“tibble”) console.","code":"\ntibble(\n  x = c(1, 2, 3),\n  y = c(\"red\", \"green\", \"blue\"),\n  z = c(TRUE, FALSE, TRUE)\n)\n## # A tibble: 3 x 3\n##       x y     z    \n##   <dbl> <chr> <lgl>\n## 1     1 red   TRUE \n## 2     2 green FALSE\n## 3     3 blue  TRUE\n\nas_tibble(iris)\n## # A tibble: 150 x 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n....\ntb <- as_tibble(iris)\nprint(tb)\n## # A tibble: 150 x 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n....\n\ndf <- as.data.frame(iris)\nprint(df)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            5.1         3.5          1.4         0.2     setosa\n## 2            4.9         3.0          1.4         0.2     setosa\n## 3            4.7         3.2          1.3         0.2     setosa\n## 4            4.6         3.1          1.5         0.2     setosa\n## 5            5.0         3.6          1.4         0.2     setosa\n## 6            5.4         3.9          1.7         0.4     setosa\n## 7            4.6         3.4          1.4         0.3     setosa\n## 8            5.0         3.4          1.5         0.2     setosa\n## 9            4.4         2.9          1.4         0.2     setosa\n....\nclass(tb[, 1])\n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nclass(tb[[1]])\n## [1] \"numeric\"\n\nclass(tb$Sepal.Length)\n## [1] \"numeric\"\n\nclass(df[, 1])\n## [1] \"numeric\"\n\nclass(df[, 1, drop = FALSE])\n## [1] \"data.frame\"\ntb$Sepal.Length\n##   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n##  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n##  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n##  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n##  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n##  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n## [145] 6.7 6.7 6.3 6.5 6.2 5.9\n\ndf$Sepal.Lengt\n##   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n##  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n##  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n##  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n##  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n##  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n## [145] 6.7 6.7 6.3 6.5 6.2 5.9"},{"path":"basics.html","id":"data-table","chapter":"2 Basics","heading":"2.6 data.table","text":"Like tibbles, data.tables enhanced version data.frames. can create data.table using function data.table(). can also coerce existing R objects data.table setDT() data.frames lists, .data.table() data structures. Note .data.table() also works data.frames lists. However setDT() memory efficient create copy original data frame list instead returns data table reference.data.tables provide additional functionality way queried. general form working data table [, j, ], can read subset rows using , operate j, grouped .Lets see work using iris example dataset.can filter rows contain Species == \"virginica.can select columns using j expression. Note change type data structure list() .() used.can select multiple columns list() .().Aside selecting columns using j, can carry computations j involving one columns subset rows using .can use expression data tables perform computations groups..N variable counts number instances particularly useful combined .can also apply multiple columns using list() .() notation. can read code calculating mean Speal.Length number instances (given .N) grouped Species whether Sepal.Length < 6.data.tables add, update, delete columns reference avoid redundant copies performance improvements. can use := operator add, update, delete columns j reference. two forms using := : [, LSH := RHS] [,:=(LHS = RHS)].Note code, need make assignments back variable modification done reference place. words modifying dt copy dt. Therefore, also see run entire code chunk , dt contain columns Sepal.Sum Petal.Sum.Since := used j, can combined seen earlier parts sub-section.can find data.tables typing vignette(package = \"data.table\") console.","code":"\ndt <- data.table(\n  x = c(1, 2, 3),\n  y = c(\"red\", \"green\", \"blue\"),\n  z = c(TRUE, FALSE, TRUE)\n)\n\nclass(\n  setDT(\n    data.frame(c(1, 2, 3))\n  )\n)\n## [1] \"data.table\" \"data.frame\"\ndt <- as.data.table(iris)\n\nprint(dt)\n##      Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n##   1:          5.1         3.5          1.4         0.2    setosa\n##   2:          4.9         3.0          1.4         0.2    setosa\n##   3:          4.7         3.2          1.3         0.2    setosa\n##   4:          4.6         3.1          1.5         0.2    setosa\n##   5:          5.0         3.6          1.4         0.2    setosa\n##  ---                                                            \n## 146:          6.7         3.0          5.2         2.3 virginica\n## 147:          6.3         2.5          5.0         1.9 virginica\n## 148:          6.5         3.0          5.2         2.0 virginica\n....\ndt[Species == \"virginica\"]\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n##  1:          6.3         3.3          6.0         2.5 virginica\n##  2:          5.8         2.7          5.1         1.9 virginica\n##  3:          7.1         3.0          5.9         2.1 virginica\n##  4:          6.3         2.9          5.6         1.8 virginica\n##  5:          6.5         3.0          5.8         2.2 virginica\n##  6:          7.6         3.0          6.6         2.1 virginica\n##  7:          4.9         2.5          4.5         1.7 virginica\n##  8:          7.3         2.9          6.3         1.8 virginica\n##  9:          6.7         2.5          5.8         1.8 virginica\n....\ndt[, Sepal.Length]\n##   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1\n##  [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0\n##  [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5\n##  [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1\n##  [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5\n##  [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3\n## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2\n## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n## [145] 6.7 6.7 6.3 6.5 6.2 5.9\n\nclass(dt[, Sepal.Length])\n## [1] \"numeric\"\n\nclass(dt[, list(Sepal.Length)])\n## [1] \"data.table\" \"data.frame\"\n\nclass(dt[, .(Sepal.Length)])\n## [1] \"data.table\" \"data.frame\"\n\ndt[, .(Sepal.Length, Species)]\n##      Sepal.Length   Species\n##   1:          5.1    setosa\n##   2:          4.9    setosa\n##   3:          4.7    setosa\n##   4:          4.6    setosa\n##   5:          5.0    setosa\n##  ---                       \n## 146:          6.7 virginica\n## 147:          6.3 virginica\n## 148:          6.5 virginica\n....\n\ndt[, mean(Sepal.Length)]\n## [1] 5.843333\n\ndt[, .(\n  Sepal.Length.Mean = mean(Sepal.Length),\n  Sepal.With.Mean = mean(Sepal.Width)\n)]\n##    Sepal.Length.Mean Sepal.With.Mean\n## 1:          5.843333        3.057333\n\ndt[\n  Species == \"virginica\" & Sepal.Length < 6,\n  .(\n    Sepal.Length.Mean = mean(Sepal.Length),\n    Sepal.With.Mean = mean(Sepal.Width)\n  )\n]\n##    Sepal.Length.Mean Sepal.With.Mean\n## 1:          5.642857        2.714286\n\ndt[, .(\n  Sepal.Length.Mean = mean(Sepal.Length),\n  Sepal.With.Mean = mean(Sepal.Width)\n),\nby = Species\n]\n##       Species Sepal.Length.Mean Sepal.With.Mean\n## 1:     setosa             5.006           3.428\n## 2: versicolor             5.936           2.770\n## 3:  virginica             6.588           2.974\n\ndt[, .N, by = Species]\n##       Species  N\n## 1:     setosa 50\n## 2: versicolor 50\n## 3:  virginica 50\ndt[, .(Sepal.Length.Mean = mean(Sepal.Length), .N),\n  by = .(Species, Sepal.Length < 6)\n]\n##       Species Sepal.Length < 6 Sepal.Length.Mean  N\n## 1:     setosa             TRUE          5.006000 50\n## 2: versicolor            FALSE          6.375000 24\n## 3: versicolor             TRUE          5.530769 26\n## 4:  virginica            FALSE          6.741860 43\n## 5:  virginica             TRUE          5.642857  7\ndt <- as.data.table(iris)\n\ndt[, Sepal.Sum := .(Sepal.Length + Sepal.Width)]\nhead(dt)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Sum\n## 1:          5.1         3.5          1.4         0.2  setosa       8.6\n## 2:          4.9         3.0          1.4         0.2  setosa       7.9\n## 3:          4.7         3.2          1.3         0.2  setosa       7.9\n## 4:          4.6         3.1          1.5         0.2  setosa       7.7\n## 5:          5.0         3.6          1.4         0.2  setosa       8.6\n## 6:          5.4         3.9          1.7         0.4  setosa       9.3\n\ndt[, `:=`(Petal.Sum = Petal.Length + Petal.Width)]\nhead(dt)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Sum\n## 1:          5.1         3.5          1.4         0.2  setosa       8.6\n## 2:          4.9         3.0          1.4         0.2  setosa       7.9\n## 3:          4.7         3.2          1.3         0.2  setosa       7.9\n## 4:          4.6         3.1          1.5         0.2  setosa       7.7\n## 5:          5.0         3.6          1.4         0.2  setosa       8.6\n## 6:          5.4         3.9          1.7         0.4  setosa       9.3\n##    Petal.Sum\n## 1:       1.6\n## 2:       1.6\n....\n\ndt[Species == \"versicolor\" | Species == \"virginica\", Sepal.Length := 0]\nhead(dt)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Sum\n## 1:          5.1         3.5          1.4         0.2  setosa       8.6\n## 2:          4.9         3.0          1.4         0.2  setosa       7.9\n## 3:          4.7         3.2          1.3         0.2  setosa       7.9\n## 4:          4.6         3.1          1.5         0.2  setosa       7.7\n## 5:          5.0         3.6          1.4         0.2  setosa       8.6\n## 6:          5.4         3.9          1.7         0.4  setosa       9.3\n##    Petal.Sum\n## 1:       1.6\n## 2:       1.6\n....\n\ndt[, Sepal.Length.Mean := mean(Sepal.Length),\n  by = .(Species)\n]\nhead(dt)\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Sum\n## 1:          5.1         3.5          1.4         0.2  setosa       8.6\n## 2:          4.9         3.0          1.4         0.2  setosa       7.9\n## 3:          4.7         3.2          1.3         0.2  setosa       7.9\n## 4:          4.6         3.1          1.5         0.2  setosa       7.7\n## 5:          5.0         3.6          1.4         0.2  setosa       8.6\n## 6:          5.4         3.9          1.7         0.4  setosa       9.3\n##    Petal.Sum Sepal.Length.Mean\n## 1:       1.6             5.006\n## 2:       1.6             5.006\n...."},{"path":"dates-and-times.html","id":"dates-and-times","chapter":"3 Dates and Times","heading":"3 Dates and Times","text":"","code":""},{"path":"dates-and-times.html","id":"prerequisites-2","chapter":"3 Dates and Times","heading":"3.1 Prerequisites","text":"chapter, introduce lubridate package designed make easier work dates times R.","code":"\nlibrary(lubridate)"},{"path":"dates-and-times.html","id":"parsing-dates-and-times","chapter":"3 Dates and Times","heading":"3.2 Parsing dates and times","text":"can easily transform dates times stored character vectors Date POSIXct (date-time) objects R using lubridate. need specify order year y, month m, day d lubridate automatically figure format.functions can also convert numeric vectors.can create Date objects time component using POSIXct date-time object simply adding underscore followed order hour h, minute m second s.can also specify time zone providing inputs argument tz. can find time zones R typing ?timezones console.Date vs date-time objects created using lubridate. default, dates created Date objects without time component. can force creation date-time object including timezone tz argument.","code":"\ndmy(\"3/12/1985\")\n## [1] \"1985-12-03\"\nymd(\"85/12/03\")\n## [1] \"1985-12-03\"\nmdy(\"Dec 3rd 1985\")\n## [1] \"1985-12-03\"\nydm(\"85-3rd-december\")\n## [1] \"1985-12-03\"\nymd(19851203)\n## [1] \"1985-12-03\"\ndmy(31285)\n## [1] \"1985-12-03\"\nymd_h(\"1985/12/03 21\")\n## [1] \"1985-12-03 21:00:00 UTC\"\nymd_hm(\"1985/12/03 21:05\")\n## [1] \"1985-12-03 21:05:00 UTC\"\nymd_hms(\"1985/12/03 21:05:30\")\n## [1] \"1985-12-03 21:05:30 UTC\"\nymd_hms(\"1985/12/03 21:05:30\", tz = \"Singapore\")\n## [1] \"1985-12-03 21:05:30 +08\"\nclass(ymd(\"1985/12/03\"))\n## [1] \"Date\"\nclass(ymd(\"1985/12/03\", tz = \"Singapore\"))\n## [1] \"POSIXct\" \"POSIXt\"\nclass(ymd_hms(\"1985/12/03 21:05:30\"))\n## [1] \"POSIXct\" \"POSIXt\""},{"path":"dates-and-times.html","id":"extracting-components","chapter":"3 Dates and Times","heading":"3.3 Extracting components","text":"Lubridate provides simple functions allows easily get different components date date-time object. functions especially useful analyzing time-series data want group data particular time period.","code":"\n\nmy_dt <- ymd_hms(\"1985/12/03 21:05:30\")\nyear(my_dt)\n## [1] 1985\nmonth(my_dt)\n## [1] 12\nday(my_dt)\n## [1] 3\nhour(my_dt)\n## [1] 21\nminute(my_dt)\n## [1] 5\nsecond(my_dt)\n## [1] 30\nwday(my_dt, label = TRUE)\n## [1] Tue\n## Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat"},{"path":"importing-data.html","id":"importing-data","chapter":"4 Importing Data","heading":"4 Importing Data","text":"","code":""},{"path":"importing-data.html","id":"prerequisites-3","chapter":"4 Importing Data","heading":"4.1 Prerequisites","text":"chapter, focus use readr package forms part tidyverse package. readr provides fast easy way parse file uses sophisticated parser guesses data type column along flexibility specify parse. also need package (easily provide relative file paths) lubridate package (work dates times).chapter also using following datasets. following code returns FALSE, refer section Finding file Preface can download datasets.","code":"\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(here)\nfile.exists(here(\"data\", \"iris.csv\"))\nfile.exists(here(\"data\", \"building.csv\"))"},{"path":"importing-data.html","id":"finding-your-file","chapter":"4 Importing Data","heading":"4.2 Finding your file","text":"importing data, need first let R know find file providing file path. can provide file paths relative top-level directory current R project () function.reference file named iris.csv located data folder located top-level directory project","code":"\nhere()\n## [1] \"/Users/adrianchong/Documents/GitHub/r4bes\"\nhere(\"data\", \"iris.csv\")\n## [1] \"/Users/adrianchong/Documents/GitHub/r4bes/data/iris.csv\""},{"path":"importing-data.html","id":"parsing-a-csv-file","chapter":"4 Importing Data","heading":"4.3 Parsing a csv file","text":"focus read_csv() function building data typically stored csv format. can find file formats readr’s documentation.easiest way parse file providing file path. cases, just work expected readr correctly guesses column specification (gets printed console) get tibble specified. readr_example() function makes easy access example files demonstrate readr’s capabilities.","code":"\nread_csv(here(\"data\", \"iris.csv\"))\n## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   Sepal.Length = col_double(),\n##   Sepal.Width = col_double(),\n##   Petal.Length = col_double(),\n##   Petal.Width = col_double(),\n##   Species = col_character()\n## )\n## # A tibble: 150 x 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <chr>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n...."},{"path":"importing-data.html","id":"building-data","chapter":"4 Importing Data","heading":"4.4 Building data","text":"Data buildings often messy without standardized format. Therefore, uncommon readr guess correctly. Parsing date/times particularly important working time-series building data.example, building.csv dataset, can see problems parsing timestamp column. Specifically, column timestamp parsed character vector actually contains date/time. skip argument particularly useful since building data often contains meta-data want exclude. character vector can also supplied specify column names.can correct using col_types argument specify column timestamp parsed date/time. can view available column specifications typing ?cols console. Typically specifying data type allowed data parsed correctly. particular dataset, two problems caused parsing fail. First, timestamp column follow ISO8601 date times parsed ISO8601 format specification provided. Second, col_double() strict allow leading trailing characters.resolve , can explicitly provide date/time format specification similar function strptime(). Type ?strptime() list character representations. However, note specified format must complete match entire string. Additionally, col_number() used place col_double() flexible ignores non-numeric characters. general, recommended explicit providing column specifications mitigate parsing errors.","code":"\n\nread_csv(\n  here(\"data\", \"building.csv\"),\n  col_names = c(\n    \"datetime\",\n    \"power\"\n  ),\n  skip = 2\n)\n## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   datetime = col_character(),\n##   power = col_number()\n## )\n## # A tibble: 1,324 x 2\n##    datetime       power\n##    <chr>          <dbl>\n##  1 1/9/19 0:00 2210185.\n##  2 1/9/19 0:30 2210196.\n##  3 1/9/19 1:00 2210208.\n##  4 1/9/19 1:30 2210219 \n##  5 1/9/19 2:00 2210231 \n##  6 1/9/19 2:30 2210242.\n##  7 1/9/19 3:00 2210254.\n....\nread_csv(\n  here(\"data\", \"building.csv\"),\n  col_types = cols(\n    col_datetime(),\n    col_double()\n  ),\n  col_names = c(\n    \"datetime\",\n    \"power\"\n  ),\n  skip = 2\n)\n## Warning: 2648 parsing failures.\n## row      col               expected       actual                                                          file\n##   1 datetime date like              1/9/19 0:00  '/Users/adrianchong/Documents/GitHub/r4bes/data/building.csv'\n##   1 power    no trailing characters 2,210,184.75 '/Users/adrianchong/Documents/GitHub/r4bes/data/building.csv'\n##   2 datetime date like              1/9/19 0:30  '/Users/adrianchong/Documents/GitHub/r4bes/data/building.csv'\n##   2 power    no trailing characters 2,210,195.75 '/Users/adrianchong/Documents/GitHub/r4bes/data/building.csv'\n##   3 datetime date like              1/9/19 1:00  '/Users/adrianchong/Documents/GitHub/r4bes/data/building.csv'\n## ... ........ ...................... ............ .............................................................\n## See problems(...) for more details.\n## # A tibble: 1,324 x 2\n##    datetime            power\n##    <dttm>              <dbl>\n##  1 NA                     NA\n##  2 NA                     NA\n##  3 NA                     NA\n##  4 NA                     NA\n##  5 NA                     NA\n##  6 NA                     NA\n##  7 NA                     NA\n....\nread_csv(\n  here(\"data\", \"building.csv\"),\n  col_types = cols(\n    col_datetime(format = \"%d/%m/%y %H:%M\"),\n    col_number()\n  ),\n  col_names = c(\n    \"datetime\",\n    \"power\"\n  ),\n  skip = 2\n)\n## # A tibble: 1,324 x 2\n##    datetime               power\n##    <dttm>                 <dbl>\n##  1 2019-09-01 00:00:00 2210185.\n##  2 2019-09-01 00:30:00 2210196.\n##  3 2019-09-01 01:00:00 2210208.\n##  4 2019-09-01 01:30:00 2210219 \n##  5 2019-09-01 02:00:00 2210231 \n##  6 2019-09-01 02:30:00 2210242.\n##  7 2019-09-01 03:00:00 2210254.\n...."},{"path":"regular-expressions.html","id":"regular-expressions","chapter":"5 Regular expressions","heading":"5 Regular expressions","text":"Regular expressions patterns used match combinations characters string. begin, just cautionary note regular expressions becoming complex, perhaps time step back think whether necessary can represented multiple expressions easier understand.","code":""},{"path":"regular-expressions.html","id":"prerequisites-4","chapter":"5 Regular expressions","heading":"5.1 Prerequisites","text":"functions str_view() str_view_all() stringr package (part tidyverse) used learn regular expressions interactively. str_view() shows first match str_view_all() shows matches.","code":"\nlibrary(tidyverse)"},{"path":"regular-expressions.html","id":"basic-matches","chapter":"5 Regular expressions","heading":"5.2 Basic matches","text":"basic form matching match exact strings","code":"\nx <- c(\"abc ABC\\n123. !?\\\\(){}\")\nwriteLines(x)\n## abc ABC\n## 123. !?\\(){}\n\nstr_view(x, \"abc\")"},{"path":"regular-expressions.html","id":"character-classes","chapter":"5 Regular expressions","heading":"5.3 Character classes","text":"Character classes allows specify list characters matching.bracket [...] can used specify list character. Therefore, match characters specified within brackets. caret ^ added start list characters, match characters list. can also specify range expression using hyphen - two characters.can also specify character classes using pre-defined names classes bracket expression.Try named classes using function str_view_all()also special metacharacters can use match entire classes characters.Note include \\ regular expression, need escape using \\\\. explained next subsection escaping .","code":"\nstr_view_all(x, \"[bcde]\")\nstr_view_all(x, \"[:alnum:]\")\nstr_view_all(x, \".\")"},{"path":"regular-expressions.html","id":"regex-escape","chapter":"5 Regular expressions","heading":"5.4 Escaping","text":"regular expressions, backslash \\ used escape character used “escape” special characters comes backslash. However, R, backslashes \\ also used escape character strings. example, string \"abc ABC 123.\\n!?\\\\(){}\" used represent characters abc ABC 123.\\n!?\\(){}. see additional backslash \\ string representation. \\ special character strings R. Therefore, represent backslash \\ string, another backslash needs added escape special representation \\ strings. means create string containing \"\", need write \"\\\\\".Therefore, create regular expressions contains backslash, need use string contains another backslash \\ escape backslash \\ forms part regular expression.example, create regular expression match character \".\" defined match character except newline. need escape \\.. However, backslash special character string. Therefore need string \"\\\\.\" represent regular expression \\.. logic applied representing metacharacters \\d, \\D, \\w, \\W, etc. need use “\\” represent \\ regular expressions.represent backslash \\ regular expression, two levels escape required!","code":"\nx <- c(\"abc ABC\\n123. !?\\\\(){}\")\nwriteLines(x)\n## abc ABC\n## 123. !?\\(){}\nstr_view_all(x, \".\")\nstr_view(x, \"\\\\\\\\\")"},{"path":"regular-expressions.html","id":"anchors","chapter":"5 Regular expressions","heading":"5.5 Anchors","text":"Regular expressions match part string unless use anchors specify positions start end string. Instead characters, anchors used specify position.can use ^ match start string $ match end string. complete match, anchor regular expression ^...$.\\b used match position known word boundary. can use \\b match start end word. can think \\B inverse \\b basically matches position \\b .","code":"\nstr_view_all(c(\"apple\", \"apple pie\", \"juicy apple\"), \"apple\")\nstr_view_all(c(\"apple\", \"pineapple\", \"juicy apple\"), \"\\\\bapple\\\\b\")"},{"path":"regular-expressions.html","id":"quantifies","chapter":"5 Regular expressions","heading":"5.6 Quantifies","text":"can use quantifiers specify number times pattern matches.default, quantifies applied single character. can use (...) apply quantifies one character.","code":"\nstr_view(c(\"a\", \"abb\", \"abbb\"), \"ab+\")\nstr_view(c(\"ab\", \"abab\", \"ababab\"), \"ab+\")"},{"path":"functions.html","id":"functions","chapter":"6 Functions","heading":"6 Functions","text":"Writing functions simple way automate commonly used code general way. Therefore, write function realized copying pasting code block . Particularly, see power functions start writing functions define building energy efficient measures wish apply building energy simulation.Additionally, using functions helps avoid making mistakes happen often copying pasting code. Additionally, requirements change, need update code one place (.e., within function) instead searching updating pieces code, error-prone.","code":""},{"path":"functions.html","id":"prerequisites-5","chapter":"6 Functions","heading":"6.1 Prerequisites","text":"use base R code illustrate creating user-defined functions. Therefore, additional packages required.","code":""},{"path":"functions.html","id":"user-defined-function","chapter":"6 Functions","heading":"6.2 User-defined function","text":"code block shows syntax creating R user-defined function using function keyword. general, function\n* Function name (function_name): name function creating name use call function. Following section ??, function names use snake_case reflective .\n* Function arguments (arg1, arg2, ...): inputs function used code place inside function.\n* Function body: place code inside body function enclosed braces {Function body}\n* Return statement: Unlike programming languages, necessary include return() statement R. R automatically returns last line body function.","code":"function_name <- function(arg1, arg2, ...){\n  Function body\n}"},{"path":"functions.html","id":"examples","chapter":"6 Functions","heading":"6.3 Examples","text":"Coefficient Variation Root-Mean-Square Error (CVRMSE) (equation (6.1)) Normalized mean bias error (NMBE) (equation (6.2)) two widely used indices evaluating well energy models describes variability measured data [6]. example, demonstrate equations translate user-defined function R.\\[\\begin{equation} \n  \\sqrt{\\frac{\\sum_{=1}^{n} \\left(y_i - \\hat{y}_i\\right)}{(n-p)}} \\Big/ \\bar{y}\n  \\tag{6.1}\n\\end{equation}\\]\\[\\begin{equation} \n  \\frac{\\sum_{=1}^{n} \\left(y_i - \\hat{y}_i\\right)}{(n-p)\\times\\bar{y}}\n  \\tag{6.2}\n\\end{equation}\\]\\(n\\) number observations; \\(y_i\\) \\(\\)th observation; \\(\\hat{y_i}\\) \\(\\)th prediction; \\(\\bar{y}\\) mean observed values.can use function compute CVRMSE follows:can use function compute NMBE follows:","code":"\ncvrmse <- function(meas, pred, p = 1) {\n  se <- (meas - pred)^2\n  n <- length(se)\n  sqrt(sum(se) / (n - p)) / mean(meas) # last line automatically returned\n}\n\ncvrmse(c(1, 2, 3), c(2, 4, 6))\n## [1] 1.322876\nnmbe <- function(meas, pred, p = 1) {\n  be <- (meas - pred)\n  n <- length(be)\n  (sum(be) / (n - p)) / mean(meas) # last line automatically returned\n}\nnmbe(c(1, 2, 3), c(2, 4, 6))\n## [1] -1.5"},{"path":"manipulate.html","id":"manipulate","chapter":"7 Manipulating Data","heading":"7 Manipulating Data","text":"Data-preprocessing important step data science process. Rarely receive data exact form need. often , need pre-process data transforming manipulating easier work . focus chapter.","code":""},{"path":"manipulate.html","id":"prerequisites-6","chapter":"7 Manipulating Data","heading":"7.1 Prerequisites","text":"chapter focus use dplyr package forms core part tidyverse package. dplyr provides function alleviates challenges data manipulation.explore basic data manipulation capabilities dplyr package, use building_meter dataset. following code returns FALSE, refer section Finding file Preface can download datasets.can downloaded XXX. dataset contains 8,760 time-series observations typical building meter measurements simulated using Department Energy’s (DOE) reference building energy model medium sized offices [3].Spaces make difficult ","code":"\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(here)\nbldg <- read_csv(here(\"data\", \"building_meter.csv\"))\n## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   `Date/Time` = col_datetime(format = \"\"),\n##   `Cooling:Electricity [J](Hourly)` = col_double(),\n##   `Heating:NaturalGas [J](Hourly)` = col_double(),\n##   `Heating:Electricity [J](Hourly)` = col_double(),\n##   `InteriorLights:Electricity [J](Hourly)` = col_double(),\n##   `ExteriorLights:Electricity [J](Hourly)` = col_double(),\n##   `InteriorEquipment:Electricity [J](Hourly)` = col_double(),\n##   `Fans:Electricity [J](Hourly)` = col_double(),\n##   `Pumps:Electricity [J](Hourly)` = col_double(),\n##   `WaterSystems:NaturalGas [J](Hourly)` = col_double()\n## )\nbldg\n## # A tibble: 8,760 x 10\n##    `Date/Time`         `Cooling:Electrici… `Heating:NaturalG… `Heating:Electric…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-01 01:00:00                   0          13517796.         182286476.\n##  2 2020-01-01 02:00:00                   0          17717617.         177367416.\n##  3 2020-01-01 03:00:00                   0          25310615.         235785509 \n##  4 2020-01-01 04:00:00                   0          20001989.         184762495.\n##  5 2020-01-01 05:00:00                   0          27925599.         245249657.\n##  6 2020-01-01 06:00:00                   0          21886933.         190670331.\n##  7 2020-01-01 07:00:00                   0          29745424.         252272477.\n....\nnew_name <- str_replace_all(names(bldg), \"\\\\W\\\\W?\", \"_\")\nnames(bldg) <- str_remove_all(new_name, \"_Hourly_\")"},{"path":"manipulate.html","id":"data-transformation","chapter":"7 Manipulating Data","heading":"7.2 Data transformation","text":"cheat sheet dplyr provides good summary data transformation functions covered chapter.select(): select columns based names.filter(): subset rows based values.mutate(): add new variables whose values function existing variables.arrange(): sort dataset based values selected columnssummarise():join.R: generic functions joins two tables together","code":""},{"path":"manipulate.html","id":"select","chapter":"7 Manipulating Data","heading":"7.2.1 select()","text":"can use function select() choose variables retain dataset based names. uncommon get datasets hundred thousands variables. example working data building management system. scenarios, often useful narrow dataset contain variables interest. select() allows easily, zoom variables columns interest.can also optionally rename columns select() function.Additionally, tidyverse provides helper functions lets select columns matching patterns names. following selection helper functions, character vector provided match. length() character vector larger 1, logical union (| operator) taken.starts_with(): Select columns starts specific character vectorends_with(): Select columns ends specific character vectorcontains(): Select columns contains specific character vectormatches(): Select columns matches regular expression. rename() dplyr function allows change names individual columns using new_name = old_name.all_of() any_of(): can also select variables character vector using selection helper functions all_of() any_of(). key difference all_of() used strict selection error thrown variable names exist. contrast, any_of() check missing variable names, thus often used ensure specific column removed.() useful selection helper function want apply function (returns TRUE FALSE) columns select columns function returns TRUE.can also define function applied within ()","code":"\nselect(bldg, Date_Time, Cooling_Electricity_J, Heating_Electricity_J)\n## # A tibble: 8,760 x 3\n##    Date_Time           Cooling_Electricity_J Heating_Electricity_J\n##    <dttm>                              <dbl>                 <dbl>\n##  1 2020-01-01 01:00:00                     0            182286476.\n##  2 2020-01-01 02:00:00                     0            177367416.\n##  3 2020-01-01 03:00:00                     0            235785509 \n##  4 2020-01-01 04:00:00                     0            184762495.\n##  5 2020-01-01 05:00:00                     0            245249657.\n##  6 2020-01-01 06:00:00                     0            190670331.\n##  7 2020-01-01 07:00:00                     0            252272477.\n....\nselect(bldg,\n  datetime = Date_Time,\n  cooling = Cooling_Electricity_J,\n  heating = Heating_Electricity_J\n)\n## # A tibble: 8,760 x 3\n##    datetime            cooling    heating\n##    <dttm>                <dbl>      <dbl>\n##  1 2020-01-01 01:00:00       0 182286476.\n##  2 2020-01-01 02:00:00       0 177367416.\n##  3 2020-01-01 03:00:00       0 235785509 \n##  4 2020-01-01 04:00:00       0 184762495.\n##  5 2020-01-01 05:00:00       0 245249657.\n##  6 2020-01-01 06:00:00       0 190670331.\n##  7 2020-01-01 07:00:00       0 252272477.\n....\nselect(bldg, starts_with(c(\"Heating\", \"Cooling\")))\n## # A tibble: 8,760 x 3\n##    Heating_NaturalGas_J Heating_Electricity_J Cooling_Electricity_J\n##                   <dbl>                 <dbl>                 <dbl>\n##  1            13517796.            182286476.                     0\n##  2            17717617.            177367416.                     0\n##  3            25310615.            235785509                      0\n##  4            20001989.            184762495.                     0\n##  5            27925599.            245249657.                     0\n##  6            21886933.            190670331.                     0\n##  7            29745424.            252272477.                     0\n....\nselect(bldg, ends_with(\"Time\"))\n## # A tibble: 8,760 x 1\n##    Date_Time          \n##    <dttm>             \n##  1 2020-01-01 01:00:00\n##  2 2020-01-01 02:00:00\n##  3 2020-01-01 03:00:00\n##  4 2020-01-01 04:00:00\n##  5 2020-01-01 05:00:00\n##  6 2020-01-01 06:00:00\n##  7 2020-01-01 07:00:00\n....\nselect(\n  bldg,\n  contains(\n    c(\n      \"Time\",\n      \"electricity\"\n    )\n  )\n)\n## # A tibble: 8,760 x 8\n##    Date_Time           Cooling_Electrici… Heating_Electrici… InteriorLights_Ele…\n##    <dttm>                           <dbl>              <dbl>               <dbl>\n##  1 2020-01-01 01:00:00                  0         182286476.            9649498.\n##  2 2020-01-01 02:00:00                  0         177367416.            9649498.\n##  3 2020-01-01 03:00:00                  0         235785509             9649498.\n##  4 2020-01-01 04:00:00                  0         184762495.            9649498.\n##  5 2020-01-01 05:00:00                  0         245249657.            9649498.\n##  6 2020-01-01 06:00:00                  0         190670331.            9649498.\n##  7 2020-01-01 07:00:00                  0         252272477.            9649498.\n....\nreg_ex <- \"[dD]ate.?[tT]ime\"\n\nselect(bldg, matches(reg_ex, ignore.case = FALSE))\n## # A tibble: 8,760 x 1\n##    Date_Time          \n##    <dttm>             \n##  1 2020-01-01 01:00:00\n##  2 2020-01-01 02:00:00\n##  3 2020-01-01 03:00:00\n##  4 2020-01-01 04:00:00\n##  5 2020-01-01 05:00:00\n##  6 2020-01-01 06:00:00\n##  7 2020-01-01 07:00:00\n....\n\nbldg_rename_a <- rename(bldg, `Date/Time` = `Date_Time`)\nselect(bldg_rename_a, matches(reg_ex, ignore.case = FALSE))\n## # A tibble: 8,760 x 1\n##    `Date/Time`        \n##    <dttm>             \n##  1 2020-01-01 01:00:00\n##  2 2020-01-01 02:00:00\n##  3 2020-01-01 03:00:00\n##  4 2020-01-01 04:00:00\n##  5 2020-01-01 05:00:00\n##  6 2020-01-01 06:00:00\n##  7 2020-01-01 07:00:00\n....\n\n\nbldg_rename_b <- rename(bldg, `datetime` = `Date_Time`)\nselect(bldg_rename_b, matches(reg_ex, ignore.case = FALSE))\n## # A tibble: 8,760 x 1\n##    datetime           \n##    <dttm>             \n##  1 2020-01-01 01:00:00\n##  2 2020-01-01 02:00:00\n##  3 2020-01-01 03:00:00\n##  4 2020-01-01 04:00:00\n##  5 2020-01-01 05:00:00\n##  6 2020-01-01 06:00:00\n##  7 2020-01-01 07:00:00\n....\nvars <- c(\"Heating_NaturalGas_J\", \"WaterSystems_NaturalGas_J\")\nselect(bldg, all_of(vars))\n## # A tibble: 8,760 x 2\n##    Heating_NaturalGas_J WaterSystems_NaturalGas_J\n##                   <dbl>                     <dbl>\n##  1            13517796.                    72000 \n##  2            17717617.                    72000 \n##  3            25310615.                  3970732.\n##  4            20001989.                    72000 \n##  5            27925599.                  3970995.\n##  6            21886933.                    72000 \n##  7            29745424.                  3970782.\n....\n\nselect(bldg, -any_of(vars))\n## # A tibble: 8,760 x 8\n##    Date_Time           Cooling_Electrici… Heating_Electrici… InteriorLights_Ele…\n##    <dttm>                           <dbl>              <dbl>               <dbl>\n##  1 2020-01-01 01:00:00                  0         182286476.            9649498.\n##  2 2020-01-01 02:00:00                  0         177367416.            9649498.\n##  3 2020-01-01 03:00:00                  0         235785509             9649498.\n##  4 2020-01-01 04:00:00                  0         184762495.            9649498.\n##  5 2020-01-01 05:00:00                  0         245249657.            9649498.\n##  6 2020-01-01 06:00:00                  0         190670331.            9649498.\n##  7 2020-01-01 07:00:00                  0         252272477.            9649498.\n....\nselect(bldg, where(is.numeric))\n## # A tibble: 8,760 x 9\n##    Cooling_Electrici… Heating_NaturalGa… Heating_Electrici… InteriorLights_Elec…\n##                 <dbl>              <dbl>              <dbl>                <dbl>\n##  1                  0          13517796.         182286476.             9649498.\n##  2                  0          17717617.         177367416.             9649498.\n##  3                  0          25310615.         235785509              9649498.\n##  4                  0          20001989.         184762495.             9649498.\n##  5                  0          27925599.         245249657.             9649498.\n##  6                  0          21886933.         190670331.             9649498.\n##  7                  0          29745424.         252272477.             9649498.\n....\n\nselect(\n  bldg,\n  where(\n    function(x) is.numeric(x)\n  )\n)\n## # A tibble: 8,760 x 9\n##    Cooling_Electrici… Heating_NaturalGa… Heating_Electrici… InteriorLights_Elec…\n##                 <dbl>              <dbl>              <dbl>                <dbl>\n##  1                  0          13517796.         182286476.             9649498.\n##  2                  0          17717617.         177367416.             9649498.\n##  3                  0          25310615.         235785509              9649498.\n##  4                  0          20001989.         184762495.             9649498.\n##  5                  0          27925599.         245249657.             9649498.\n##  6                  0          21886933.         190670331.             9649498.\n##  7                  0          29745424.         252272477.             9649498.\n...."},{"path":"manipulate.html","id":"filter","chapter":"7 Manipulating Data","heading":"7.2.2 filter()","text":"can use filter() subset rows based values. dplyr’s filter() function retains rows return TRUE conditions specified. first argument data frame subsequent arguments conditions used subset observations. words, multiple arguments filter() combined & () logical operator. work logical operators | () ! (), combine within single argument.Often, ability subset observations based timestamp useful feature working timeseries dataYou can also combine filter() grepl() subset rows using regular expressions.","code":"\nfilter(bldg, Cooling_Electricity_J != 0)\n## # A tibble: 2,678 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-02-11 15:00:00            4354833.                  0          91807743.\n##  2 2020-02-11 16:00:00            2387624.                  0          94118327.\n##  3 2020-02-23 09:00:00            7606370.                  0         102607149.\n##  4 2020-02-23 10:00:00           21074975.                  0          76304715.\n##  5 2020-02-23 11:00:00           23052733.                  0          63182232.\n##  6 2020-02-23 12:00:00           23185185.                  0          53130886.\n##  7 2020-02-23 13:00:00           20501352.                  0          68037068.\n....\nfilter(bldg, InteriorLights_Electricity_J > 100000000)\n## # A tibble: 2,520 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-02 09:00:00                   0         128483630.         473529413.\n##  2 2020-01-02 10:00:00                   0         109562756.         398893378.\n##  3 2020-01-02 11:00:00                   0          88363562.         350234124.\n##  4 2020-01-02 12:00:00                   0          75198754.         305357974 \n##  5 2020-01-02 13:00:00                   0          70573992.         300958898.\n##  6 2020-01-02 14:00:00                   0          84277786.         249050033.\n##  7 2020-01-02 15:00:00                   0          99713290.         238506555.\n....\n\nfilter(\n  bldg, Cooling_Electricity_J != 0,\n  Cooling_Electricity_J < 4000000 |\n    Cooling_Electricity_J > 22000000,\n)\n## # A tibble: 2,428 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-02-11 16:00:00            2387624.                  0          94118327.\n##  2 2020-02-23 11:00:00           23052733.                  0          63182232.\n##  3 2020-02-23 12:00:00           23185185.                  0          53130886.\n##  4 2020-02-23 20:00:00            1387715.                  0         101207501.\n##  5 2020-03-10 12:00:00           25148879.                  0          17802883.\n##  6 2020-03-10 13:00:00           31261163.                  0          15048079.\n##  7 2020-03-10 14:00:00           30172661.                  0           1791300.\n....\n\nfilter(bldg, month(Date_Time) == 1, day(Date_Time) == 1)\n## # A tibble: 24 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-01 01:00:00                   0          13517796.         182286476.\n##  2 2020-01-01 02:00:00                   0          17717617.         177367416.\n##  3 2020-01-01 03:00:00                   0          25310615.         235785509 \n##  4 2020-01-01 04:00:00                   0          20001989.         184762495.\n##  5 2020-01-01 05:00:00                   0          27925599.         245249657.\n##  6 2020-01-01 06:00:00                   0          21886933.         190670331.\n##  7 2020-01-01 07:00:00                   0          29745424.         252272477.\n....\nfilter(bldg, day(Date_Time) == 1)\n## # A tibble: 287 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-01 01:00:00                   0          13517796.         182286476.\n##  2 2020-01-01 02:00:00                   0          17717617.         177367416.\n##  3 2020-01-01 03:00:00                   0          25310615.         235785509 \n##  4 2020-01-01 04:00:00                   0          20001989.         184762495.\n##  5 2020-01-01 05:00:00                   0          27925599.         245249657.\n##  6 2020-01-01 06:00:00                   0          21886933.         190670331.\n##  7 2020-01-01 07:00:00                   0          29745424.         252272477.\n....\nfilter(bldg, month(Date_Time) > 4, month(Date_Time) < 10)\n## # A tibble: 3,672 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-05-01 00:00:00                  0                   0                 0 \n##  2 2020-05-01 01:00:00                  0                   0                 0 \n##  3 2020-05-01 02:00:00                  0                   0                 0 \n##  4 2020-05-01 03:00:00                  0                   0                 0 \n##  5 2020-05-01 04:00:00                  0                   0                 0 \n##  6 2020-05-01 05:00:00                  0                   0                 0 \n##  7 2020-05-01 06:00:00                  0                   0         252935532.\n....\nfilter(bldg, month(Date_Time) > 4 & month(Date_Time) < 10)\n## # A tibble: 3,672 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-05-01 00:00:00                  0                   0                 0 \n##  2 2020-05-01 01:00:00                  0                   0                 0 \n##  3 2020-05-01 02:00:00                  0                   0                 0 \n##  4 2020-05-01 03:00:00                  0                   0                 0 \n##  5 2020-05-01 04:00:00                  0                   0                 0 \n##  6 2020-05-01 05:00:00                  0                   0                 0 \n##  7 2020-05-01 06:00:00                  0                   0         252935532.\n...."},{"path":"manipulate.html","id":"arrange","chapter":"7 Manipulating Data","heading":"7.2.3 arrange()","text":"can use arrange() sort dataset based values selected columns. first argument data frame second column name sort data frame . one column name provided, subsequent column names used break ties preceeding columns.can use desc() order column descending order","code":"\narrange(bldg, Cooling_Electricity_J)\n## # A tibble: 8,760 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-01 01:00:00                   0          13517796.         182286476.\n##  2 2020-01-01 02:00:00                   0          17717617.         177367416.\n##  3 2020-01-01 03:00:00                   0          25310615.         235785509 \n##  4 2020-01-01 04:00:00                   0          20001989.         184762495.\n##  5 2020-01-01 05:00:00                   0          27925599.         245249657.\n##  6 2020-01-01 06:00:00                   0          21886933.         190670331.\n##  7 2020-01-01 07:00:00                   0          29745424.         252272477.\n....\narrange(bldg, desc(Cooling_Electricity_J))\n## # A tibble: 8,760 x 10\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-07-19 16:00:00          356330907.                  0                  0\n##  2 2020-07-19 15:00:00          349038364.                  0                  0\n##  3 2020-07-18 16:00:00          339376366.                  0                  0\n##  4 2020-07-19 17:00:00          338918865.                  0                  0\n##  5 2020-07-17 15:00:00          337245696.                  0                  0\n##  6 2020-07-18 14:00:00          336127683.                  0                  0\n##  7 2020-07-17 16:00:00          335013419.                  0                  0\n...."},{"path":"manipulate.html","id":"mutate","chapter":"7 Manipulating Data","heading":"7.2.4 mutate()","text":"can use mutate() add new variables whose values function existing variables (Note can also refer newly created variables). newly created variables added end dataset.can use transmute() want keep new variables dataset.Useful mutate functions include\n- Arithmetic operators (+, -, *,/, etc.) logarithms (log(),log2(), etc.) -lead()andlag(), allowing create lead lag variables useful especially working timeseries data. -if_else()andcase_when()`TODO: Example use if_else() case_when() mutate() pipe","code":"\nmutate(bldg,\n  Total_Heating_J = Heating_NaturalGas_J + Heating_Electricity_J,\n  Cooling_Heating_kWh = (Total_Heating_J + Cooling_Electricity_J) * 2.77778e-7\n)\n## # A tibble: 8,760 x 12\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-01 01:00:00                   0          13517796.         182286476.\n##  2 2020-01-01 02:00:00                   0          17717617.         177367416.\n##  3 2020-01-01 03:00:00                   0          25310615.         235785509 \n##  4 2020-01-01 04:00:00                   0          20001989.         184762495.\n##  5 2020-01-01 05:00:00                   0          27925599.         245249657.\n##  6 2020-01-01 06:00:00                   0          21886933.         190670331.\n##  7 2020-01-01 07:00:00                   0          29745424.         252272477.\n....\ntransmute(bldg,\n  Total_Heating_J = Heating_NaturalGas_J + Heating_Electricity_J,\n  Cooling_Heating_kWh = (Total_Heating_J + Cooling_Electricity_J) * 2.77778e-7\n)\n## # A tibble: 8,760 x 2\n##    Total_Heating_J Cooling_Heating_kWh\n##              <dbl>               <dbl>\n##  1      195804272.                54.4\n##  2      195085034.                54.2\n##  3      261096124.                72.5\n##  4      204764484.                56.9\n##  5      273175257.                75.9\n##  6      212557265.                59.0\n##  7      282017901.                78.3\n....\nheat <- transmute(bldg,\n  Total_Heating_J = Heating_NaturalGas_J + Heating_Electricity_J\n)\n\nmutate(\n  heat,\n  lag_1 = lag(Total_Heating_J),\n  lag_2 = lag(lag_1),\n  lag_3 = lag(Total_Heating_J, 3)\n)\n## # A tibble: 8,760 x 4\n##    Total_Heating_J      lag_1      lag_2      lag_3\n##              <dbl>      <dbl>      <dbl>      <dbl>\n##  1      195804272.        NA         NA         NA \n##  2      195085034. 195804272.        NA         NA \n##  3      261096124. 195085034. 195804272.        NA \n##  4      204764484. 261096124. 195085034. 195804272.\n##  5      273175257. 204764484. 261096124. 195085034.\n##  6      212557265. 273175257. 204764484. 261096124.\n##  7      282017901. 212557265. 273175257. 204764484.\n...."},{"path":"manipulate.html","id":"summarise-and-group_by","chapter":"7 Manipulating Data","heading":"7.2.5 summarise() and group_by()","text":"summarise() summarize() collapse data frame one row combination grouping variables. Therefore, useful .However, summarise() combined group_by() allow easily summarise data based individual groups.","code":"\nsummarise(bldg,\n  Heating_Total = sum(Heating_Electricity_J),\n  Heating_Avg = mean(Heating_Electricity_J),\n  Heating_Peak = max(Heating_Electricity_J)\n)\n## # A tibble: 1 x 3\n##   Heating_Total Heating_Avg Heating_Peak\n##           <dbl>       <dbl>        <dbl>\n## 1 508713824519.   58072354.   1002989103\nbldg_month <- mutate(bldg,\n  Year = year(Date_Time),\n  Month = month(Date_Time)\n)\n\nbldg_by_month <- group_by(bldg_month, Year, Month)\n\nsummarise(bldg_by_month,\n  Heating_Total = sum(Heating_Electricity_J),\n  Heating_Avg = mean(Heating_Electricity_J),\n  Heating_Peak = max(Heating_Electricity_J)\n)\n## `summarise()` has grouped output by 'Year'. You can override using the `.groups` argument.\n## # A tibble: 13 x 5\n## # Groups:   Year [2]\n##     Year Month Heating_Total Heating_Avg Heating_Peak\n##    <dbl> <dbl>         <dbl>       <dbl>        <dbl>\n##  1  2020     1 124527837066.  167601396.   978585992.\n##  2  2020     2  89836688374.  133486907.  1002989103 \n##  3  2020     3  55674915533.   74932592.   795581602.\n##  4  2020     4  32036849861.   44495625.   639342141.\n##  5  2020     5   7726081874.   10384519.   252935532.\n##  6  2020     6    624415414.     867244.    39920827.\n...."},{"path":"manipulate.html","id":"across","chapter":"7 Manipulating Data","heading":"7.2.6 across()","text":"across() makes possible apply functions across multiple columns within functions summarise() mutate(), using semantics filter() (see section 7.2.1) makes easy refer columns based names.may also pass list functions applied selected columns.","code":"\n\nmutate(bldg,\n  total = rowSums(across(where(is.numeric)))\n)\n## # A tibble: 8,760 x 11\n##    Date_Time           Cooling_Electricit… Heating_NaturalGa… Heating_Electrici…\n##    <dttm>                            <dbl>              <dbl>              <dbl>\n##  1 2020-01-01 01:00:00                   0          13517796.         182286476.\n##  2 2020-01-01 02:00:00                   0          17717617.         177367416.\n##  3 2020-01-01 03:00:00                   0          25310615.         235785509 \n##  4 2020-01-01 04:00:00                   0          20001989.         184762495.\n##  5 2020-01-01 05:00:00                   0          27925599.         245249657.\n##  6 2020-01-01 06:00:00                   0          21886933.         190670331.\n##  7 2020-01-01 07:00:00                   0          29745424.         252272477.\n....\n\nsummarise(\n  bldg_by_month,\n  across(\n    contains(\"electricity\"),\n    list(Total = sum, Avg = mean, Peak = max)\n  )\n)\n## `summarise()` has grouped output by 'Year'. You can override using the `.groups` argument.\n## # A tibble: 13 x 23\n## # Groups:   Year [2]\n##     Year Month Cooling_Electricity_J… Cooling_Electricity… Cooling_Electricity_…\n##    <dbl> <dbl>                  <dbl>                <dbl>                 <dbl>\n##  1  2020     1                     0                    0                     0 \n##  2  2020     2             181014017.              268966.             23185185.\n##  3  2020     3             775169988.             1043297.             79053134.\n##  4  2020     4           11551697867.            16044025.            226399417.\n##  5  2020     5           22952133253.            30849641.            191404162.\n##  6  2020     6           53405646191.            74174509.            302585966 \n...."},{"path":"manipulate.html","id":"pipes","chapter":"7 Manipulating Data","heading":"7.3 Pipes","text":"%>% forward pipe operator magrittr package comes loaded tidyverse package. pipe operator %>% handy allows operations performed sequentially. general, can think sending output one function input next .pipe operator,Instead many intermediary stepsYou can connect multiple operators sequentially using pipe operatorFigure 7.1 shows happening graphically.\nFigure 7.1: Piping data one function next sequentially\nexample using bldg dataset.","code":"\nfirst_output <- first(data)\nsecond_output <- second(first_output)\nfinal_result <- third(second_output)\nfinal_result <- first(data) %>%\n  second() %>%\n  third()\n\nbldg %>%\n  select(Date_Time, contains(\"Heating\")) %>%\n  mutate(\n    Month = month(Date_Time),\n    Total_Heating_J = rowSums(across(where(is.numeric)))\n  ) %>%\n  group_by(Month) %>%\n  summarise(across(\n    where(is.numeric),\n    list(Total = sum, Peak = max)\n  ))\n## # A tibble: 12 x 7\n##    Month Heating_NaturalG… Heating_NaturalG… Heating_Electric… Heating_Electric…\n##    <dbl>             <dbl>             <dbl>             <dbl>             <dbl>\n##  1     1      59660445562.        527825997.     124648935250.        978585992.\n##  2     2      41029360544.        530570172.      89836688374.       1002989103 \n##  3     3       9377325423.        230991815.      55674915533.        795581602.\n##  4     4       3352997015.        156525821       32036849861.        639342141.\n##  5     5          2144014.          2144014.       7726081874.        252935532.\n##  6     6                0                 0         624415414.         39920827.\n##  7     7                0                 0         128302310.         16757642 \n...."},{"path":"get-started.html","id":"get-started","chapter":"8 Introduction","heading":"8 Introduction","text":"goal part book get started working EnergyPlus R quickly possible. part book, learn get model R run simulation (Chapter 9). learn extract predifined annual summary reports manipulate focus placed important variables observations (Chapter 10). Finally, provide gentle introduction visualizing data summary reports R (Chapter 11).Understanding details EnergyPlus inputs outputs structured important part building energy simulation. come back next part book gotten started basics.","code":""},{"path":"parse.html","id":"parse","chapter":"9 Parse then simulate","heading":"9 Parse then simulate","text":"","code":""},{"path":"parse.html","id":"prerequisites-7","chapter":"9 Parse then simulate","heading":"9.1 Prerequisites","text":"chapter introduce eplusr package designed interface EnergyPlus ease application data driven analytics. like learn underlying theory data structured hood, might enjoy eplusr paper published Journal Energy Buildings [7].book, learn using U.S. Department Energy (DOE) Commercial Reference Building medium office energy model [3]. use DOE reference building well established widely used. importantly, publicly available comes distributed EnergyPlus example files, making examples code book easier follow reproduce.convenience, model can found ./data/idf/RefBldgMediumOfficeNew2004_Chicago.idf relative project root folder. Likewise, weather file using can found ./data/epw/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw relative project root folder.","code":"\nlibrary(eplusr)\nlibrary(here)"},{"path":"parse.html","id":"key-energyplus-files","chapter":"9 Parse then simulate","heading":"9.2 Key EnergyPlus files","text":"starting work EnergyPlus, three main EnergyPlus files know: input data dictionary (IDD), input data file (IDF), EnergyPlus weather file (EPW). three files ASCII files also know text files. IDD lists possible objects EnergyPlus along respective input requirements. IDF provides description building simulated. EPW contains hourly sub-hourly weather data (.e., boundary conditions) needed simulation.","code":""},{"path":"parse.html","id":"parsing-the-model","chapter":"9 Parse then simulate","heading":"9.3 Parsing the model","text":"starting, need first tell R EnergyPlus located.get started, need first familiar three basic classes (Idf, Epw, EplusJob) eplusr package.Idf class used represent EnergyPlus model. contains methods allows easily query modify model. can use read_idf() function parse EnergyPlus model R providing file path EnergyPlus IDF file. can use function () easily reference file path relative project root folder.Epw class used represent weather data used simulation. can use read_epw() function parse EPW weather file R providing file path EnergyPlus EPW file. Likewise, function () used easily reference file path relative project root folder.EplusJob used extract simulation results. run model, EplusJob object returned. One way run model use $run() method Idf class, provide weather file form epw object.","code":"\nuse_eplus(\"/Applications/EnergyPlus-9-4-0\")\n## Configure data of EnergyPlus v9.4.0 located at '/Applications/EnergyPlus-9-4-0' already exists. No Updating performed.\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n## IDD v9.4.0 has not been parsed before.\n## Try to locate 'Energy+.idd' in EnergyPlus v9.4.0 installation folder '/Applications/EnergyPlus-9-4-0'.\n## IDD file found: '/Applications/EnergyPlus-9-4-0/Energy+.idd'.\n## Start parsing...\n## Parsing completed.\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)\njob <- model$run(weather = epw)"},{"path":"parse.html","id":"simulating-the-model","chapter":"9 Parse then simulate","heading":"9.4 Simulating the model","text":"check SimulationControl RunPeriod objects EnergyPlus simulating model. SimulationControl object allows user specify type simulations performed. can view object R navigating opening RefBldgMediumOfficeNew2004_Chicago.idf file R followed searching string SimulationControl (Figure 9.1). value Run Simulation Weather File Run Periods field illustrated Figure 9.1, simulation run weather file run periods (Figure 9.2). words, want run simulation based provided epw weather file period specify RunPeriod object, check field set YES.\nFigure 9.1: SimulationControl object EnergyPlus.\n\nFigure 9.2: RunPeriod object EnergyPlus.\ncan use run() method Idf class run simulation using EnergyPlus. can choose weather file run simulation specifying Epw object file path .epw file weather argument. can also specify directory save simulation results using dir argument. default, folder Idf file used save simulation results.want save simulation results locally, can first save model temporary directory using function tempdir() running simulation.","code":"\njob <- model$run(weather = epw,\n                 dir = here(\"data\", \"idf\", \"run\", \"test_run.idf\"))\nmodel$save(file.path(tempdir(), \"model.idf\"))\njob <- model$run(epw)\n## EnergyPlus Starting\n## EnergyPlus, Version 9.4.0-998c4b761e, YMD=2021.08.21 12:32\n## \n## Could not find platform independent libraries <prefix>\n## Could not find platform dependent libraries <exec_prefix>\n## Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]\n## Initializing Response Factors\n## Calculating CTFs for \"STEEL FRAME NON-RES EXT WALL\"\n## Calculating CTFs for \"IEAD NON-RES ROOF\"\n## Calculating CTFs for \"EXT-SLAB\"\n...."},{"path":"summary.html","id":"summary","chapter":"10 Summary reports","heading":"10 Summary reports","text":"","code":""},{"path":"summary.html","id":"prerequisites-8","chapter":"10 Summary reports","heading":"10.1 Prerequisites","text":"chapter focus set get EnergyPlus simulation outputs using eplusr package. illustrate manipulation simulation data using tidyverse, use ggplot2 visualize simulation dataWe working IDF EPW file pertains U.S. Department Energy (DOE) Commercial Reference Building Chicago’s TMY3 respectively.","code":"\nlibrary(eplusr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(here)\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)"},{"path":"summary.html","id":"output-summary-reports","chapter":"10 Summary reports","heading":"10.2 Output summary reports","text":"output summary reports EnergyPlus, need first run simulation. object job code belongs EplusJob class. set dir = NULL, simulation results saved temporary directory instead folder containing IDF file. find summary report html file illustrated Figure 10.1.\nFigure 10.1: Report summary html file output EnergyPlus\neplusr, EplusJob class provides different methods extract simulation results. bring summary reports R, can use tabular_data() method, extracts EnergyPlus summary reports R data.table.data table consists following nine columns.case: Name simulation case. case variable useful filtering simulation results running multiple parametric simulations. However, since running one simulation example one unique case.index: Row index tablereport_name: Names summary report observation belongs toreport_for: context summary report .table_name: name table within report observation belongs .column_name: name column within table observation belongs .row_name: name row within table observation belongs .units: unit observation.value: value observation. Note default, stored character vector.illustrate, refer back Figure 10.1 arguments report_name, table_name, column_name, row_name, units, value correspond html summary report. can easily retrieve Total Site Energy Energy Per Total Building Area Site Source Energy table AnnualBuildingUtilityPerformanceSummary report. Note whitespaces specifying report_name.examples follows.can retrieve end use energy consumption data arrange descending value.can retrieve normalized metrics group fuel type.can also retrieve details model inputs summary reports.Opaque exterior building envelope.Exterior fenestration building envelope.can refer section “Output:Table:SummaryReports” EnergyPlus’s “Output Details Examples” documentation list available reports.","code":"\njob <- model$run(epw, dir = tempdir())\n## EnergyPlus Starting\n## EnergyPlus, Version 9.4.0-998c4b761e, YMD=2021.08.21 12:32\n## \n## Could not find platform independent libraries <prefix>\n## Could not find platform dependent libraries <exec_prefix>\n## Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]\n## Initializing Response Factors\n## Calculating CTFs for \"STEEL FRAME NON-RES EXT WALL\"\n## Calculating CTFs for \"IEAD NON-RES ROOF\"\n## Calculating CTFs for \"EXT-SLAB\"\n....\nclass(job)\n## [1] \"EplusJob\" \"R6\"\nreport <- job$tabular_data()\ncolnames(report)\n## [1] \"case\"        \"index\"       \"report_name\" \"report_for\"  \"table_name\" \n## [6] \"column_name\" \"row_name\"    \"units\"       \"value\"\nreport_example <- report %>%\n    filter(report_name == \"AnnualBuildingUtilityPerformanceSummary\", \n           table_name == \"Site and Source Energy\",\n           column_name == \"Energy Per Total Building Area\",\n           row_name == \"Total Site Energy\")\nreport_end_use <- report %>%\n    filter(table_name == \"End Uses\", \n           grepl(\"Electricity|Natural Gas\", column_name, ignore.case = TRUE),\n           !grepl(\"total\", row_name, ignore.case = TRUE)) %>%\n    mutate(value = as.numeric(value)*277.778,\n           units = \"kWh\") %>%\n    select(row_name, column_name, units, value) %>%\n    rename(category = row_name, fuel = column_name) %>%\n    arrange(desc(value)) %>%\n    drop_na()\nreport_norm <- report %>%\n    filter(table_name == \"Utility Use Per Conditioned Floor Area\",\n           row_name != \"Total\") %>%\n    mutate(value = as.numeric(value) * 0.2777777777777778,\n           units = \"kWh/m2\") %>%\n    filter(value > 0.0) %>%\n    select(category = row_name, fuel = column_name, units, value) %>%\n    group_by(category) %>%\n    summarise(total = sum(value))\nreport_op_ext <- report %>%\n    filter(table_name == \"Opaque Exterior\",\n           grepl(\"Azimuth|U-Factor with Film\", column_name)) %>%\n    mutate(value = as.numeric(value)) %>%\n    select(row_name, column_name, units, value) \nreport_ext_fenestration <- report %>%\n    filter(table_name == \"Exterior Fenestration\",\n           !grepl(\"total\", row_name, ignore.case = TRUE)) %>%\n    mutate(value = as.numeric(value)) %>%\n    filter(value > 0) %>%\n    select(row_name, column_name, units, value)\n## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion"},{"path":"visualize.html","id":"visualize","chapter":"11 Visualize","heading":"11 Visualize","text":"","code":""},{"path":"visualize.html","id":"prerequisites-9","chapter":"11 Visualize","heading":"11.1 Prerequisites","text":"chapter, use eplusr package interface EnergyPlus via R, tidyverse package manipulate simulation results, package specify relative file paths.Additionally, introduce ggplot2, input-tidy visualization package based grammar graphics [8]. also introduce RColorBrewer package contains predefined color palettes make easy pick right one creating graphics R.chapter, also working U.S. Department Energy (DOE) Commercial Reference Building medium office energy model [3] third latest typical meteorological (TMY3) weather data Chicago. first parse IDf EPW.","code":"\nlibrary(eplusr)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)"},{"path":"visualize.html","id":"colors","chapter":"11 Visualize","heading":"11.2 Colors","text":"Choosing right color scheme important aspect data visualization effects might relative visual perception luminance. Fortunately, R pre-defined color pallettes make super easy. select appropriates ones. chapter, using pre-defined color palletes RColorBrewer package. general, want use palettes colorblind friendly.representing gradients (temperature data), want use sequential color palletes perceptually uniform color progresses low high.want use diverging color palletes uses neutral mid-point diverges perceptually equal steps ends data. example using RdBu color pallette represent temperature data diverges cold hot.want map categorical variables qualitative color palettes perceptually uniform variables standing perceptually due ’s color. instance, visualizing energy usage intensity different buildings, want colors used represent building easily distinguishable time one stand another even though numerically equivalent.","code":"\ndisplay.brewer.all(colorblindFriendly = TRUE)\ndisplay.brewer.all(type=\"seq\", colorblindFriendly=TRUE)\ndisplay.brewer.all(type=\"div\", colorblindFriendly=TRUE)\ndisplay.brewer.all(type=\"qual\", colorblindFriendly=TRUE) "},{"path":"visualize.html","id":"ggplot","chapter":"11 Visualize","heading":"11.3 ggplot()","text":"","code":""},{"path":"visualize.html","id":"functions-and-components","chapter":"11 Visualize","heading":"11.3.1 Functions and Components","text":"plots created ggplot2 begins ggplot() function initializes ggplot plot object can used specify variables data mapped “aesthetics” visualization. function two key arguements. first argument data data frame used plot. second argument mapping used specify variables data mapped “aesthetics” visualization. function aes() quoting function (.e., inputs evaluated context data). means can name variables data frame directly within aes() function.can specify graph adding one following components +layer comprises geometric objects geom, statistical transformation stat, position adjustments. Typically, layer created using geom_<function>()scales map data values visual properties color, fill, shape, size.coordinate system specifies coordinates data maps plot. Typically, Cartesian coordinates used. However, coordinate systems includes polar coordinates map projections.facets divides data subsets based one discrete variables. subsets data displayed subplots plot.theme can used customize non-data components plot titles, labels, fonts, background, gridlines, legends.see use ggplot() mentioned components concretely go visualization recipes subsequent sections.","code":"ggplot(data = <DATA>, mapping = aes(<x, y, ...>))ggplot(data = <DATA>, mapping = aes(<x, y, ...>)) +\n    <GEOM_FUNCTION>(stat = <STAT>, position = <POSITION>) +\n    <COORD_FUNCTION>(...) +\n    <SCALE_FUNCTION>(...) +\n    <FACET_FUNCTION)(...) +\n    <THEME_FUNCTION>(...)"},{"path":"visualize.html","id":"a-simple-example","chapter":"11 Visualize","heading":"11.3.2 A simple example","text":"Bar graphs common way visualize building simulation end use data. section, illustrate use ggplot various components using using report_end_use data frame created preceding section.can create bar graphs adding geom_bar(). default, stat = bin geom_bar() gives count x. However, data contains y values, want use stat = \"identity\".default, bar charts stacked. scenario, two groups fuel, electricity natural gas. However, many groups, stacked bar charts can difficult visualize. can place side side instead using position = position_dodge().can use scale change fill bar chart. scale_*_brewer() functions provides easy way specify palettes rcolorbrewer package ggplot.can flip data coordinates maps plot get horizontal bar plots coord_filp().can divide plot various facets subsetting plot based onone discrete variables. example, divide plot row wise based fuel type using facet_grid().probably noticed. x-axis labels legible due overlapping plotting data vertical bar charts.can use theme() element_text() change x-axis labels appear. case rotating counter-clockwise 90 degrees (angle = 90), vertically center justify text (vjust = 0.5), horizontally right justify text (hjust = 1). vjust hjust, 0 1 refers left right justify respectively.can also use theme() together various element_* functions control elements plot title, legend, axis labels, borders, background, etc. can find possible arguments element_function() typing ?margin console. element_* functions used theme() specify non-data components plot. four element functions :element_blank(): assign blankelement_rect(): specifying borders backgroundelement_line(): specifying lineselement_text(): specifying text","code":"\nreport_end_use <- report %>%\n    filter(table_name == \"End Uses\", \n           grepl(\"Electricity|Natural Gas\", column_name, ignore.case = TRUE),\n           !grepl(\"total\", row_name, ignore.case = TRUE)) %>%\n    mutate(value = as.numeric(value)*277.778,\n           units = \"kWh\") %>%\n    select(row_name, column_name, units, value) %>%\n    rename(category = row_name, fuel = column_name) %>%\n    arrange(desc(value)) %>%\n    drop_na()\nggplot(data = report_end_use, aes(x = category, y = value, fill = fuel)) +\n    geom_bar(stat=\"identity\")\nggplot(data = report_end_use, aes(x = category, y = value, fill = fuel)) +\n    geom_bar(stat=\"identity\", position = position_dodge())\nggplot(data = report_end_use, aes(x = category, y = value, fill = fuel)) +\n    geom_bar(stat=\"identity\") + \n    scale_fill_brewer(palette = \"Set2\") \nggplot(data = report_end_use, aes(x = category, y = value, fill = fuel)) +\n    geom_bar(stat=\"identity\", position = position_dodge()) + \n    scale_fill_brewer(palette = \"Set2\") +\n    coord_flip()\nggplot(data = report_end_use, aes(x = category, y = value)) +\n    geom_bar(stat=\"identity\", position = position_dodge()) + \n    coord_flip() +\n    facet_grid(rows = vars(fuel))\nggplot(data = report_end_use, aes(x = category, y = value, fill = fuel)) +\n    geom_bar(stat=\"identity\") + \n    scale_fill_brewer(palette = \"Set2\") +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\nggplot(data = report_end_use, aes(x = category, y = value, fill = fuel)) +\n    geom_bar(stat=\"identity\") + \n    scale_fill_brewer(palette = \"Set2\") +\n    ggtitle(\"End Use\") +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n          axis.title = element_text(face = \"bold\", \n                                    colour = \"red\",\n                                    size = 20),\n          axis.line = element_line(linetype = \"dashed\", \n                                   arrow = arrow()),\n          plot.background = element_rect(fill = \"grey\"),\n          legend.title = element_blank() # remove legend title\n          )"},{"path":"input-output.html","id":"input-output","chapter":"12 Introduction","heading":"12 Introduction","text":"part book, learn EnergyPlus’s input data structure (Chapter 13), programmatically query modify R (Chapter 14). also point corresponding EnergyPlus reference documentation help gain better understanding inner workings EnergyPlus. Understanding inputs model important proverb “garbage , garbage ” clearly spells . can best data science workflows simulation results good quality model ’s inputs.Subsequently, learn extract detailed output files (Chapter 15). work time-series simulation results explore using R’s data transformation data visualization capabilities (Chapter 16).","code":""},{"path":"input.html","id":"input","chapter":"13 Model Input Structure","heading":"13 Model Input Structure","text":"","code":""},{"path":"input.html","id":"prerequisites-10","chapter":"13 Model Input Structure","heading":"13.1 Prerequisites","text":"chapter, use eplusr package extract various inputs EnergyPlus model, , learn inputs EnergyPlus structured.working IDF EPW file pertains U.S. Department Energy (DOE) Commercial Reference Building Chicago’s TMY3 respectively.","code":"\nlibrary(eplusr)\nlibrary(here)\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)"},{"path":"input.html","id":"energyplus-documentation","chapter":"13 Model Input Structure","heading":"13.2 EnergyPlus Documentation","text":"Although focus chapter elucidate model inputs structured facilitate querying modifying , also important understand input means. Fortunately, EnergyPlus well documented documentation comes downloaded installation EnergyPlus. find documents within EnergyPlus’s installation folder.default, EnergyPlus installed C:\\EnergyPlusVX-Y-0 Windows, /usr/local/EnergyPlus-X-Y-0 Linux /Applications/EnergyPlus-X-Y-0 macOS).highly recommend referring EnergyPlus input output reference ([EnergyPlus installation folder] > Documentation > InputOutputReference.pdf), provides thorough description every field every input object EnergyPlus.find input output reference satisfy inquisitive mind, recommend reading EnergyPlus engineering reference ([EnergyPlus installation folder] > Documentation > EngineeringReference.pdf), provides insights theoretical basis behind various EnergyPlus calculations.","code":""},{"path":"input.html","id":"energyplus-input-structure","chapter":"13 Model Input Structure","heading":"13.3 EnergyPlus input structure","text":"EnergyPlus, inputs model can categorized hierarchically top level known class groups (Figure 13.1). class group consists multiple input classes identifiable class names. class defined fields may may required. Required fields ’s name suggest field must value. field left blank pre-defined default values, error raised simulation run.\nFigure 13.1: Hierarchical model inputs organizational structure.\nFigure 13.2 illustrates using class group Surface Construction Elements EnergyPlus. Surface Construction Elements class groups consists several classes include Material:NoMass, Material:AirGap, WindowMaterial:SimpleGalzingSystem class amongst others. class defined respective fields. example, WindowMaterial:SimpleGalzingSystem class defined unique Name, U-Factor, SHGC Solar Heat gain Coefficient, `Visible Transmittance glazing system.\nFigure 13.2: Categorization EnergyPlus inputs\n","code":""},{"path":"input.html","id":"class-vs-object","chapter":"13 Model Input Structure","heading":"13.4 Class vs Object","text":"book, make distinction classes objects following terminologies object-oriented programming (OOP). difference classes objects subtle yet conceptually simple. can think class blueprint template creating objects. created objects therefore instances class. example, modeling glazing systems perspective running energy simulation, thermal properties glazing system required calculations. Different glazing systems different thermal properties, include U-factor, solar heat gain coefficient (SHGC), visible transmittance (\\(T_{vis}\\)). However, properties although different values, common characteristic across different glazing systems. Therefore, glazing system class variables U-factor, SHGC, \\(T_{vis}\\) can used template create various glazing objects.\nFigure 13.3: Figure shows three different glazing objects can created glazing class, acts template.\n","code":""},{"path":"input.html","id":"model-query","chapter":"13 Model Input Structure","heading":"13.5 Model Query","text":"","code":""},{"path":"input.html","id":"idf-class-methods","chapter":"13 Model Input Structure","heading":"13.5.1 Idf class methods","text":"Since EnergyPlus model organized hierarchically, demonstrate query model hierarchically using methods Idf class.can see class groups exists model $group_name() methodYou can also view list classes model grouped corresponding class group.can also view list objects defined particular class model using $object_name() method. example code chunk tells us currently two materials (CP02 CARPET PAD MAT-AIR-WALL) created using Material:NoMass class. can think classes templates creating objects defines model explained previous sub-section. particular example, two material objects CP02 CARPET PAD MAT-AIR-WALL instances model defined based Material:NoMass class.can also query multiple classes.Finally, can also query individual objects using $objects() method.","code":"\nmodel$group_name()\n##  [1] \"Simulation Parameters\"              \"Location and Climate\"              \n##  [3] \"Schedules\"                          \"Surface Construction Elements\"     \n##  [5] \"Thermal Zones and Surfaces\"         \"Internal Gains\"                    \n##  [7] \"Zone Airflow\"                       \"Exterior Equipment\"                \n....\nmodel$class_name(by_group = TRUE)\n## $`Simulation Parameters`\n##  [1] \"Version\"                            \"SimulationControl\"                 \n##  [3] \"Building\"                           \"ShadowCalculation\"                 \n##  [5] \"SurfaceConvectionAlgorithm:Inside\"  \"SurfaceConvectionAlgorithm:Outside\"\n##  [7] \"HeatBalanceAlgorithm\"               \"ZoneAirHeatBalanceAlgorithm\"       \n##  [9] \"Timestep\"                           \"ConvergenceLimits\"                 \n## \n## $`Location and Climate`\n## [1] \"Site:Location\"                         \n## [2] \"SizingPeriod:DesignDay\"                \n....\nmodel$object_name(\"Material:NoMass\")\n## $`Material:NoMass`\n## [1] \"CP02 CARPET PAD\" \"MAT-AIR-WALL\"\nmodel$object_name(c(\"Material\", \"Construction\"))\n## $Material\n##  [1] \"Steel Frame NonRes Wall Insulation\" \"IEAD NonRes Roof Insulation\"       \n##  [3] \"Std Wood 6inch\"                     \"Wood Siding\"                       \n##  [5] \"1/2IN Gypsum\"                       \"1IN Stucco\"                        \n##  [7] \"8IN CONCRETE HW\"                    \"Metal Siding\"                      \n##  [9] \"HW CONCRETE\"                        \"Roof Membrane\"                     \n## [11] \"Metal Decking\"                      \"Metal Roofing\"                     \n## [13] \"MAT-CC05 4 HW CONCRETE\"             \"Std AC02\"                          \n## \n## $Construction\n....\nmodel$objects(c(\"Steel Frame Non-res Ext Wall\", \"IEAD Non-res Roof\"))\n## $`Steel Frame Non-res Ext Wall`\n## <IdfObject: 'Construction'> [ID:37] `Steel Frame Non-res Ext Wall`\n## ── COMMENTS ────────────────────────────────────────────────────────────────────\n## ! ***OPAQUE CONSTRUCTIONS AND MATERIALS***\n## ! Exterior Walls\n## ── VALUES ──────────────────────────────────────────────────────────────────────\n## Class: <Construction>\n## ├─ 1*: \"Steel Frame Non-res Ext Wall\",  !- Name\n## │─ 2*: \"Wood Siding\",      !- Outside Layer\n## │─ 3 : \"Steel Frame NonRes Wall Insulation\",  !- Layer 2\n...."},{"path":"input.html","id":"operator","chapter":"13 Model Input Structure","heading":"13.5.2 $ operator","text":"Since model stored named list R, can use $ operator also query elements name. instance, can access objects defined using Material:NoMass class $Material:NoMass. Since class, object, field names EnergyPlus often violets variable naming restrictions R (e.g., containing special characters :, white spaces, etc.), identifiers need placed within set single back quotes ` tell R variable name.$`Material:NoMass` list objects Material:NoMass class.Since model stored hierarchically, can chain adding another $ access modify lower levels. Using example, able retrieve CP02 CARPET PAD object $`Material:NoMass`$`CP02 CARPET PAD`.Likewise, go hierarchy extract value particular field object chaining another $. example shows Thermal Resistance value CP02 CARPET PAD object defined using Material:NoMass class 0.2165.can use definition method returns fields needed inputs define particular class\nNow, compare output code chunk Figure 13.2. required fields indicated eplusr using asterix *. Using Material:NoMass class example (Figure 13.4), information can obtained IDD file (Energy+.idd) required fields indicated \\required-field tag. definitions different tags can found begining IDD file.\nFigure 13.4: Screen capture definition Material:NoMass class EnergyPlus IDD file (Energy+.idd)\n","code":"\nmodel$`Material:NoMass`\n## $`CP02 CARPET PAD`\n## <IdfObject: 'Material:NoMass'> [ID:56] `CP02 CARPET PAD`\n## Class: <Material:NoMass>\n## ├─ 1*: \"CP02 CARPET PAD\", !- Name\n## │─ 2*: \"VeryRough\",       !- Roughness\n## │─ 3*: 0.2165,            !- Thermal Resistance {m2-K/W}\n## │─ 4 : 0.9,               !- Thermal Absorptance\n## │─ 5 : 0.7,               !- Solar Absorptance\n## └─ 6 : 0.8;               !- Visible Absorptance\n## \n....\nmodel$`Material:NoMass`$`CP02 CARPET PAD`\n## <IdfObject: 'Material:NoMass'> [ID:56] `CP02 CARPET PAD`\n## Class: <Material:NoMass>\n## ├─ 1*: \"CP02 CARPET PAD\", !- Name\n## │─ 2*: \"VeryRough\",       !- Roughness\n## │─ 3*: 0.2165,            !- Thermal Resistance {m2-K/W}\n## │─ 4 : 0.9,               !- Thermal Absorptance\n## │─ 5 : 0.7,               !- Solar Absorptance\n## └─ 6 : 0.8;               !- Visible Absorptance\nmodel$`Material:NoMass`$`CP02 CARPET PAD`$`Thermal Resistance`\n## [1] 0.2165\nmodel$definition(\"Material:NoMass\")\n## <IddObject: 'Material:NoMass'>\n## ── MEMO ────────────────────────────────────────────────────────────────────────\n##   \"Regular materials properties described whose principal description is R (Thermal Resistance)\"\n## \n## ── PROPERTIES ──────────────────────────────────────────────────────────────────\n##   * Group: 'Surface Construction Elements'\n##   * Unique: FALSE\n##   * Required: FALSE\n##   * Total fields: 6\n## \n## ── FIELDS ──────────────────────────────────────────────────────────────────────\n##   1*: Name\n##   2*: Roughness\n##   3*: Thermal Resistance\n##   4 : Thermal Absorptance\n##   5 : Solar Absorptance\n##   6 : Visible Absorptance"},{"path":"input.html","id":"object-interdependencies","chapter":"13 Model Input Structure","heading":"13.6 Object interdependencies","text":"inter-dependencies different objects challenging aspect working energy models. important note changing object affects object also objects reference . classic example relationship building’s thermal zones, surfaces, construction, materials. single building energy model comprises one thermal zones thermal zone ’s boundaries defined several surfaces. surface assigned one construction layer construction material defined based ’s thermal properties.Using construction Steel Frame Non-res Ext Wall example. can see references materials Wood Siding, Steel Frame NonRes Wall Insulation, 1/2IN Gypsum. Likewise, referenced surfaces Steel Frame Non-res Ext Wall, Perimeter_bot_Plenum_Wall_North, …, Perimeter_top_ZN_4_Wall_West. Therefore, changing thermal properties either three materials Wood Siding, Steel Frame NonRes Wall Insulation, 1/2IN Gypsum change thermal properties Steel Frame Non-res Ext Wall Construction subsequently surfaces references . different note, changing object’s name also require updating fields model references object. example, changing Steel Frame Non-res Ext Wall Steel Frame Non-res Wall require updating Construction Name field surfaces references , otherwise, severe error raised simulation run.EnergyPlus, object may referenced ","code":"\nmodel$object_relation(\"Steel Frame Non-res Ext Wall\")\n## ── Refer to Others ─────────────────────────────────────────────────────────────\n##  Class: <Construction>\n##  └─ Object [ID:37] <Steel Frame Non-res Ext Wall>\n##     ├─ 2: \"Wood Siding\", !- Outside Layer\n##     │  v~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##     │  └─ Class: <Material>\n##     │     └─ Object [ID:50] <Wood Siding>\n##     │        └─ 1: \"Wood Siding\"; !- Name\n##     │  \n##     ├─ 3: \"Steel Frame NonRes Wall Insulation\",  !- Layer 2\n....\nmodel$object_relation(\"Window Non-res Fixed\")\n## ── Refer to Others ─────────────────────────────────────────────────────────────\n##  Class: <Construction>\n##  └─ Object [ID:45] <Window Non-res Fixed>\n##      └─ 2: \"NonRes Fixed Assembly Window\";  !- Outside Layer\n##         v~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##         └─ Class: <WindowMaterial:SimpleGlazingSystem>\n##            └─ Object [ID:46] <NonRes Fixed Assembly Window>\n##               └─ 1: \"NonRes Fixed Assembly Window\";  !- Name\n##     \n## \n...."},{"path":"modify.html","id":"modify","chapter":"14 Modify model inputs","heading":"14 Modify model inputs","text":"chapter, learn modify model inputs.","code":""},{"path":"modify.html","id":"prerequisites-11","chapter":"14 Modify model inputs","heading":"14.1 Prerequisites","text":"chapter, use eplusr package query modify various inputs EnergyPlus model. also combine learned data manipulation (tidyverse package) make easier work simulation inputs.working IDF EPW file pertains U.S. Department Energy (DOE) Commercial Reference Building Chicago’s TMY3 respectively.","code":"\nlibrary(eplusr)\nlibrary(tidyverse)\nlibrary(here)\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)"},{"path":"modify.html","id":"extract-and-modify","chapter":"14 Modify model inputs","heading":"14.2 Extract and Modify","text":"Changing values existing objects model important functionality application data exploration data science EnergyPlus. many approaches extract modify EnergyPlus model using eplusr. chapter focus onDirectly extracting modifying field values single object using [[ $ operator.Directly extracting modifying field values single object using [[ $ operator.Extracting modifying multiple objects using methods Idf class. Type ?Idf console see Idf class methods.Extracting modifying multiple objects using methods Idf class. Type ?Idf console see Idf class methods.","code":""},{"path":"modify.html","id":"single-object","chapter":"14 Modify model inputs","heading":"14.2.1 Single object","text":"Like can access field values model using $ operator, can likewise modify simply accessing replace current value assigning different value. instance, can change Thermal Resistance field value CP02 CARPET PAD object 0.5 using <- operator assign 0.5 field Thermal Resistance.Another example showing can modify lighting power density (field name: Watts_per_Zone_Floor_Area) particular zone (object name: Perimeter_bot_ZN_1_Lights) 10.76 (current value) 15 (new value).Existing field values object Perimeter_bot_ZN_1_Lights, instance Lights class.Changing value field Watts_per_Zone_Floor_Area ’s existing value 10.76 15.","code":"\nmodel$`Material:NoMass`$`CP02 CARPET PAD`$`Thermal Resistance` <- 0.5\nmodel$`Material:NoMass`$`CP02 CARPET PAD`\n## <IdfObject: 'Material:NoMass'> [ID:56] `CP02 CARPET PAD`\n## Class: <Material:NoMass>\n## ├─ 1*: \"CP02 CARPET PAD\", !- Name\n## │─ 2*: \"VeryRough\",       !- Roughness\n## │─ 3*: 0.5,               !- Thermal Resistance {m2-K/W}\n## │─ 4 : 0.9,               !- Thermal Absorptance\n## │─ 5 : 0.7,               !- Solar Absorptance\n## └─ 6 : 0.8;               !- Visible Absorptance\nmodel$Lights$Perimeter_bot_ZN_1_Lights\n## <IdfObject: 'Lights'> [ID:240] `Perimeter_bot_ZN_1_Lights`\n## Class: <Lights>\n## ├─ 01*: \"Perimeter_bot_ZN_1_Lights\",  !- Name\n## │─ 02*: \"Perimeter_bot_ZN_1\",  !- Zone or ZoneList Name\n## │─ 03*: \"BLDG_LIGHT_SCH\",   !- Schedule Name\n## │─ 04 : \"Watts/Area\",       !- Design Level Calculation Method\n## │─ 05 : <Blank>,            !- Lighting Level {W}\n## │─ 06 : 10.76,              !- Watts per Zone Floor Area {W/m2}\n## │─ 07 : <Blank>,            !- Watts per Person {W/person}\n## │─ 08 : 0.4,                !- Return Air Fraction\n....\nmodel$Lights$Perimeter_bot_ZN_1_Lights$Watts_per_Zone_Floor_Area <- 15\nmodel$Lights$Perimeter_bot_ZN_1_Lights\n## <IdfObject: 'Lights'> [ID:240] `Perimeter_bot_ZN_1_Lights`\n## Class: <Lights>\n## ├─ 01*: \"Perimeter_bot_ZN_1_Lights\",  !- Name\n## │─ 02*: \"Perimeter_bot_ZN_1\",  !- Zone or ZoneList Name\n## │─ 03*: \"BLDG_LIGHT_SCH\",   !- Schedule Name\n## │─ 04 : \"Watts/Area\",       !- Design Level Calculation Method\n## │─ 05 : <Blank>,            !- Lighting Level {W}\n## │─ 06 : 15,                 !- Watts per Zone Floor Area {W/m2}\n## │─ 07 : <Blank>,            !- Watts per Person {W/person}\n## │─ 08 : 0.4,                !- Return Air Fraction\n...."},{"path":"modify.html","id":"multiple-objects","chapter":"14 Modify model inputs","heading":"14.2.2 Multiple objects","text":"Methods extract data:can extract EnergyPlus objects interest R data frame using $to_table method Idf class. arguments provided method, entire EnergyPlus model converted data frame.data frame consists following six columns.id (integer): Integer identifiers EnergyPlus objects.name (character): Names EnergyPlus objects.class (character): class EnergyPlus object belongs .index (integer): Row index field particular EnergyPlus object.field (character): name column within table observation belongs .value (character): value field.Take minute now open EnergyPlus IDF file (\"RefBldgMediumOfficeNew2004_Chicago.idf\"). Compare text file data frame , identify values columns class, name, field correspond IDF text file. also notice EnergyPlus classes Version SimulationControl name field, explains stored NA data frame.Subset ClassWorking entire model can difficult due large number rows. can extract objects belonging class supplying character vector class names interest argument class.can also extract particular objects different classes supplying character vector object names argument .EnergyPlus objects data.frame format, can take advantage tidyverse library easily manipulate modify values. example, can use filter() function subset data frame retain rows interest dplyr::mutate() function modify values within columns.example , first extract objects Lights class EnergyPlus model. filter data frame contain field \"Watts per Zone Floor Area\", used specify lighting power density \\(W/m^2\\) EnergyPlus. Lastly, change lighting power density objects Lights class \\(10.76 W/m^2\\) \\(15 W/m^2\\).However, notice modifying model just changing values data frame. surprising since extracted data frame copy model model .modify model, need use $update() method Idf class, can take modified data frame argument.Subset ObjectsYou can also extract data EnergyPlus model based object names supplying object names argument $to_table() method. example follows, show changing thermal properties external wall construction.First, can find Construction objects make external wall scanning objects BuildingSurface:Detailed class, describes surfaces model. general, external wall surfaces Surface Type == Wall Outside Boundary Conditions == Outdoors (.e., surface exposed outside temperature conditions). model, external wall made Steel Frame Non-res Ext Wall object Construction class.object Steel Frame Non-res Ext Wall comprises three materials (Wood Siding, Steel Frame NonRes Wall Insulation, 1/2IN Gypsum) modeled using class Material. modify thermal properties external wall, need modify inputs either three materials.first extract three materials model.can modify extracted information data.frame. , increase Conductivity 1/2IN Gypsum 0.16 0.20, double Thickness wall insultion (Steel Frame NonRes Wall Insulation).Subsequently, can update model using modified data.frame $update() method Idf class.","code":"\nmodel$to_table()\n##        id name             class index\n##    1:   1 <NA>           Version     1\n##    2:   2 <NA> SimulationControl     1\n##    3:   2 <NA> SimulationControl     2\n##    4:   2 <NA> SimulationControl     3\n##    5:   2 <NA> SimulationControl     4\n##   ---                                 \n## 7839: 681 <NA>       FuelFactors    32\n## 7840: 681 <NA>       FuelFactors    33\n## 7841: 681 <NA>       FuelFactors    34\n....\nmodel$to_table(class = c(\"Construction\", \"Lights\"))\n##       id                         name        class index\n##   1:  37 Steel Frame Non-res Ext Wall Construction     1\n##   2:  37 Steel Frame Non-res Ext Wall Construction     2\n##   3:  37 Steel Frame Non-res Ext Wall Construction     3\n##   4:  37 Steel Frame Non-res Ext Wall Construction     4\n##   5:  39            IEAD Non-res Roof Construction     1\n##  ---                                                    \n## 217: 251    Perimeter_top_ZN_4_Lights       Lights     9\n## 218: 251    Perimeter_top_ZN_4_Lights       Lights    10\n## 219: 251    Perimeter_top_ZN_4_Lights       Lights    11\n....\nmodel$to_table(which = c(\"Wood Siding\", \n                         \"Steel Frame NonRes Wall Insulation\", \n                         \"1/2IN Gypsum\"))\n##     id                               name    class index               field\n##  1: 50                        Wood Siding Material     1                Name\n##  2: 50                        Wood Siding Material     2           Roughness\n##  3: 50                        Wood Siding Material     3           Thickness\n##  4: 50                        Wood Siding Material     4        Conductivity\n##  5: 50                        Wood Siding Material     5             Density\n##  6: 50                        Wood Siding Material     6       Specific Heat\n##  7: 50                        Wood Siding Material     7 Thermal Absorptance\n##  8: 50                        Wood Siding Material     8   Solar Absorptance\n##  9: 50                        Wood Siding Material     9 Visible Absorptance\n....\n\nmodel$to_table(which = c(\"Perimeter_bot_ZN_1_Lights\"))\n##      id                      name  class index\n##  1: 240 Perimeter_bot_ZN_1_Lights Lights     1\n##  2: 240 Perimeter_bot_ZN_1_Lights Lights     2\n##  3: 240 Perimeter_bot_ZN_1_Lights Lights     3\n##  4: 240 Perimeter_bot_ZN_1_Lights Lights     4\n##  5: 240 Perimeter_bot_ZN_1_Lights Lights     5\n##  6: 240 Perimeter_bot_ZN_1_Lights Lights     6\n##  7: 240 Perimeter_bot_ZN_1_Lights Lights     7\n##  8: 240 Perimeter_bot_ZN_1_Lights Lights     8\n##  9: 240 Perimeter_bot_ZN_1_Lights Lights     9\n....\nlights_df <- model$to_table(class = c(\"Lights\")) %>%\n  mutate(value = if_else(field == \"Watts per Zone Floor Area\", # condition\n                         \"15\", # value if TRUE\n                         value) # value if FALSE\n         )\n\n\nlights_df\n##       id                      name  class index\n##   1: 237        Core_bottom_Lights Lights     1\n##   2: 237        Core_bottom_Lights Lights     2\n##   3: 237        Core_bottom_Lights Lights     3\n##   4: 237        Core_bottom_Lights Lights     4\n##   5: 237        Core_bottom_Lights Lights     5\n##  ---                                           \n## 191: 251 Perimeter_top_ZN_4_Lights Lights     9\n## 192: 251 Perimeter_top_ZN_4_Lights Lights    10\n## 193: 251 Perimeter_top_ZN_4_Lights Lights    11\n....\nmodel$`Lights`\n## $Core_bottom_Lights\n## <IdfObject: 'Lights'> [ID:237] `Core_bottom_Lights`\n## ── COMMENTS ────────────────────────────────────────────────────────────────────\n## ! ***LIGHTS***\n## ── VALUES ──────────────────────────────────────────────────────────────────────\n## Class: <Lights>\n## ├─ 01*: \"Core_bottom_Lights\",  !- Name\n## │─ 02*: \"Core_bottom\",      !- Zone or ZoneList Name\n## │─ 03*: \"BLDG_LIGHT_SCH\",   !- Schedule Name\n## │─ 04 : \"Watts/Area\",       !- Design Level Calculation Method\n....\nmodel$update(lights_df)\n## $Core_bottom_Lights\n## <IdfObject: 'Lights'> [ID:237] `Core_bottom_Lights`\n## ── COMMENTS ────────────────────────────────────────────────────────────────────\n## ! ***LIGHTS***\n## ── VALUES ──────────────────────────────────────────────────────────────────────\n## Class: <Lights>\n## ├─ 01*: \"Core_bottom_Lights\",  !- Name\n## │─ 02*: \"Core_bottom\",      !- Zone or ZoneList Name\n## │─ 03*: \"BLDG_LIGHT_SCH\",   !- Schedule Name\n## │─ 04 : \"Watts/Area\",       !- Design Level Calculation Method\n....\nmodel$`Lights`\n## $Core_bottom_Lights\n## <IdfObject: 'Lights'> [ID:237] `Core_bottom_Lights`\n## ── COMMENTS ────────────────────────────────────────────────────────────────────\n## ! ***LIGHTS***\n## ── VALUES ──────────────────────────────────────────────────────────────────────\n## Class: <Lights>\n## ├─ 01*: \"Core_bottom_Lights\",  !- Name\n## │─ 02*: \"Core_bottom\",      !- Zone or ZoneList Name\n## │─ 03*: \"BLDG_LIGHT_SCH\",   !- Schedule Name\n## │─ 04 : \"Watts/Area\",       !- Design Level Calculation Method\n....\next_wall_surf <- model$to_table(class = c(\"BuildingSurface:Detailed\"), wide =TRUE) %>%\n  filter(`Surface Type` == \"Wall\", `Outside Boundary Condition` == \"Outdoors\")\n\nunique(ext_wall_surf$`Construction Name`)\n## [1] \"Steel Frame Non-res Ext Wall\"\nmodel$object_relation(\"Steel Frame Non-res Ext Wall\")\n## ── Refer to Others ─────────────────────────────────────────────────────────────\n##  Class: <Construction>\n##  └─ Object [ID:37] <Steel Frame Non-res Ext Wall>\n##     ├─ 2: \"Wood Siding\", !- Outside Layer\n##     │  v~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##     │  └─ Class: <Material>\n##     │     └─ Object [ID:50] <Wood Siding>\n##     │        └─ 1: \"Wood Siding\"; !- Name\n##     │  \n##     ├─ 3: \"Steel Frame NonRes Wall Insulation\",  !- Layer 2\n....\next_wall_mat <- model$to_table(which = c(\"Wood Siding\",\n                                         \"Steel Frame NonRes Wall Insulation\",\n                                         \"1/2IN Gypsum\"))\next_wall_mat\n##     id                               name    class index               field\n##  1: 50                        Wood Siding Material     1                Name\n##  2: 50                        Wood Siding Material     2           Roughness\n##  3: 50                        Wood Siding Material     3           Thickness\n##  4: 50                        Wood Siding Material     4        Conductivity\n##  5: 50                        Wood Siding Material     5             Density\n##  6: 50                        Wood Siding Material     6       Specific Heat\n##  7: 50                        Wood Siding Material     7 Thermal Absorptance\n##  8: 50                        Wood Siding Material     8   Solar Absorptance\n##  9: 50                        Wood Siding Material     9 Visible Absorptance\n....\n\next_wall_mat[name == \"1/2IN Gypsum\" & field == \"Conductivity\"]$value <- \"0.20\"\n\next_wall_mat[name == \"Steel Frame NonRes Wall Insulation\" & \n               field == \"Thickness\"]$value <- \"0.174\"\nmodel$update(ext_wall_mat)\n## $`Wood Siding`\n## <IdfObject: 'Material'> [ID:50] `Wood Siding`\n## Class: <Material>\n## ├─ 1*: \"Wood Siding\",  !- Name\n## │─ 2*: \"MediumSmooth\", !- Roughness\n## │─ 3*: 0.01,           !- Thickness {m}\n## │─ 4*: 0.11,           !- Conductivity {W/m-K}\n## │─ 5*: 544.62,         !- Density {kg/m3}\n## │─ 6*: 1210,           !- Specific Heat {J/kg-K}\n## │─ 7 : 0.9,            !- Thermal Absorptance\n....\n\nmodel$Material$`1/2IN Gypsum`\n## <IdfObject: 'Material'> [ID:51] `1/2IN Gypsum`\n## Class: <Material>\n## ├─ 1*: \"1/2IN Gypsum\", !- Name\n## │─ 2*: \"Smooth\",       !- Roughness\n## │─ 3*: 0.0127,         !- Thickness {m}\n## │─ 4*: 0.2,            !- Conductivity {W/m-K}\n## │─ 5*: 784.9,          !- Density {kg/m3}\n## │─ 6*: 830,            !- Specific Heat {J/kg-K}\n## │─ 7 : 0.9,            !- Thermal Absorptance\n## │─ 8 : 0.92,           !- Solar Absorptance\n....\n\nmodel$Material$`Steel Frame NonRes Wall Insulation`\n## <IdfObject: 'Material'> [ID:38] `Steel Frame NonRes Wall Insulation`\n## Class: <Material>\n## ├─ 1*: \"Steel Frame NonRes Wall Insulation\",  !- Name\n## │─ 2*: \"MediumRough\",      !- Roughness\n## │─ 3*: 0.174,              !- Thickness {m}\n## │─ 4*: 0.049,              !- Conductivity {W/m-K}\n## │─ 5*: 265,                !- Density {kg/m3}\n## │─ 6*: 836.8,              !- Specific Heat {J/kg-K}\n## │─ 7 : 0.9,                !- Thermal Absorptance\n## │─ 8 : 0.7,                !- Solar Absorptance\n...."},{"path":"modify.html","id":"create-new-objects","chapter":"14 Modify model inputs","heading":"14.3 Create new objects","text":"","code":""},{"path":"modify.html","id":"add","chapter":"14 Modify model inputs","heading":"14.3.1 add","text":"can add new objects model using $add() method Idf class. $add() method takes ’s first argument nested named list form. Note <CLASS NAME> case-sensitive <FIELD NAME> .Suppose want add new material model, can define using EnergyPlus’s Material class. Figure 14.1 can translated tell us Material class consists following fieldsName required field type alpha (.e., string)Roughness required field type choice possible choices VeryRough, Rough, MediumRou.gh, MediumSmooth, Smooth, VerySmooth.Thickness required field unit measurement meters. real number must \\(>=0\\)Conductivity required field unit measurement \\(W/m.K\\). real number must \\(>=0\\)Density required field unit measurement \\(kg/m^3\\). real number must \\(>=0\\)Specific Heat required field unit measurement \\(J/kg.K\\). real number must \\(>=100\\)Thermal Absorptance required field. real number, default value 0.9 specified, must 0 0.99999.Solar Absorptance required field. real number, default value 0.7 specified, must 0 0.99999.Visible Absorptance required field. real number, default value 0.7 specified, must 0 0.99999.\nFigure 14.1: Definition EnergyPlus Material class based IDD.\nBased definitions provided IDD, can define add new 100mm brick object. default, empty fields filled default values specified IDD. mentioned earlier, note class name (Material example) case-sensitive, field names (Name, Roughness, Thickness, etc.) case-insensitive.default, empty fields filled default values specified IDD object defined using minimum number fields. change change setting .default = FALSE (default values used) .= TRUE (fields added).","code":"\n`list(<CLASS NAME> = list(<FIELD NAME> = <FIELD VALUE>))`\nnew_mat <- list(\n  Material = list(\n    Name = \"100mm brick\",\n    ROUGHness = \"Rough\",\n    thickness = 0.10,\n    conducTIVITY = 0.89,\n    density = 1920,\n    `Specific Heat` = 790\n  ),\n  Material = list(\n    name = \"spandrel glass\",\n    roughness = \"smooth\",\n    thickness = 0.006,\n    conductivity = 0.99,\n    density = 2528,\n    `Specific Heat` = 880\n  ))\n\nmodel$add(new_mat)\n## $`100mm brick`\n## <IdfObject: 'Material'> [ID:682] `100mm brick`\n## Class: <Material>\n## ├─ 1*: \"100mm brick\", !- Name\n## │─ 2*: \"Rough\",       !- Roughness\n## │─ 3*: 0.1,           !- Thickness {m}\n## │─ 4*: 0.89,          !- Conductivity {W/m-K}\n## │─ 5*: 1920,          !- Density {kg/m3}\n## └─ 6*: 790;           !- Specific Heat {J/kg-K}\n## \n....\n\nmodel$objects(c(\"100mm brick\", \"spandrel glass\"))\n## $`100mm brick`\n## <IdfObject: 'Material'> [ID:682] `100mm brick`\n## Class: <Material>\n## ├─ 1*: \"100mm brick\", !- Name\n## │─ 2*: \"Rough\",       !- Roughness\n## │─ 3*: 0.1,           !- Thickness {m}\n## │─ 4*: 0.89,          !- Conductivity {W/m-K}\n## │─ 5*: 1920,          !- Density {kg/m3}\n## └─ 6*: 790;           !- Specific Heat {J/kg-K}\n## \n...."},{"path":"modify.html","id":"duplicate","chapter":"14 Modify model inputs","heading":"14.3.2 duplicate","text":"","code":""},{"path":"output.html","id":"output","chapter":"15 Detailed output","heading":"15 Detailed output","text":"","code":""},{"path":"output.html","id":"prerequisites-12","chapter":"15 Detailed output","heading":"15.1 Prerequisites","text":"chapter focus set get EnergyPlus simulation outputs using eplusr package. illustrate manipulation simulation data using tidyverse, use ggplot2 visualize simulation dataWe working IDF EPW file pertains U.S. Department Energy (DOE) Commercial Reference Building Chicago’s TMY3 respectively.","code":"\nlibrary(eplusr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(here)\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)"},{"path":"output.html","id":"meters","chapter":"15 Detailed output","heading":"15.2 Meters","text":"EnergyPlus allows specify meters retrieve simulation outputs. However, know meters available (output) model, must first run simulation. can retrieve list available meters function read_mdd(), returns five column data.table.","code":"\nmdd <- job$read_mdd()\nmdd\n## ══ EnergyPlus Meter Data Dictionary File ═══════════════════════════════════════\n##   * EnergyPlus version: 9.4.0 (998c4b761e)\n##   * Simulation started: 2021-08-21 12:32:00\n## \n## ── Details ─────────────────────────────────────────────────────────────────────\n##      index reported_time_step report_type\n##   1:     1               Zone       Meter\n##   2:     2               Zone       Meter\n##   3:     3               Zone       Meter\n##   4:     4               Zone       Meter\n...."},{"path":"output.html","id":"variables","chapter":"15 Detailed output","heading":"15.3 Variables","text":"","code":"\npreprocess_idf <- function(idf, meters, variables) {\n    # make sure weather file input is respected\n    idf$SimulationControl$Run_Simulation_for_Weather_File_Run_Periods <- \"Yes\"\n\n    # make sure energy consumption is presented in kWh\n    if (is.null(idf$OutputControl_Table_Style)) {\n        idf$add(OutputControl_Table_Style = list(\"HTML\", \"JtoKWH\"))\n    }else{\n        idf$OutputControl_Table_Style$Unit_Conversion <- \"JtoKWH\"\n    }\n\n    # remove all existing meter and variable outputs\n    if(!is.null(idf$`Output:Meter`)){\n        idf$Output_Meter <- NULL\n    }\n    \n    # remove all existing meter and variable outputs\n    if(!is.null(idf$`Output:Table:Monthly`)){\n        idf$`Output:Table:Monthly` <- NULL\n    }\n\n    if(!is.null(idf$`Output:Variable`)){\n        idf$Output_Variable <- NULL\n    }\n\n    # add meter outputs to get hourly time-series energy consumption\n    idf$add(Output_Meter := meters)\n\n    # add variable outputs to get hourly zone air temperature\n    idf$add(Output_Variable := variables)\n\n    # make sure the modified model is returned\n    return(idf)\n}\nmeters <- list(\n    key_name = c(\n        \"Cooling:Electricity\",\n        \"Heating:NaturalGas\",\n        \"Heating:Electricity\",\n        \"InteriorLights:Electricity\",\n        \"ExteriorLights:Electricity\",\n        \"InteriorEquipment:Electricity\",\n        \"Fans:Electricity\",\n        \"Pumps:Electricity\",\n        \"WaterSystems:NaturalGas\"\n    ),\n    Reporting_Frequency = \"Hourly\"\n)\n\nvariables <- list(\n    key_value = \"*\",\n    Variable_Name = c(\n        \"Zone Mean Air Temperature\"\n    ),\n    Reporting_Frequency = \"Hourly\"\n)\n\n#model <- preprocess_idf(model, meters, variables)\n\n#model$save(here(\"data/idf/model_preprocessed.idf\"), overwrite = TRUE)\n#job <- model$run(path_epw)"},{"path":"explore.html","id":"explore","chapter":"16 Model Exploration","heading":"16 Model Exploration","text":"","code":""},{"path":"explore.html","id":"prerequisites-13","chapter":"16 Model Exploration","heading":"16.1 Prerequisites","text":"working IDF EPW file pertains U.S. Department Energy (DOE) Commercial Reference Building Chicago’s TMY3 respectively.","code":"\nlibrary(eplusr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(here)\npath_idf <- here(\"data\", \"idf\", \"RefBldgMediumOfficeNew2004_Chicago.idf\")\nmodel <- read_idf(path_idf)\n\npath_epw <- here(\"data\", \"epw\", \"USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\")\nepw <- read_epw(path_epw)"},{"path":"program.html","id":"program","chapter":"17 Introduction","heading":"17 Introduction","text":"","code":""},{"path":"energy-efficient-measures.html","id":"energy-efficient-measures","chapter":"18 Energy Efficient Measures","heading":"18 Energy Efficient Measures","text":"","code":""},{"path":"parametric-simulations.html","id":"parametric-simulations","chapter":"19 Parametric simulations","heading":"19 Parametric simulations","text":"","code":""},{"path":"advanced.html","id":"advanced","chapter":"20 Introduction","heading":"20 Introduction","text":"","code":""},{"path":"sensitivity-analysis.html","id":"sensitivity-analysis","chapter":"21 Sensitivity analysis","heading":"21 Sensitivity analysis","text":"William Occam seek economical description natural phenomena avoid excessive models overparameterized. Principal Parisimony.","code":""},{"path":"optimization.html","id":"optimization","chapter":"22 Optimization","heading":"22 Optimization","text":"","code":""},{"path":"calibration.html","id":"calibration","chapter":"23 Calibration","heading":"23 Calibration","text":"Taking reference quotation statistician George Box “models wrong, useful”","code":""},{"path":"reproduce.html","id":"reproduce","chapter":"24 Introduction","heading":"24 Introduction","text":"","code":""},{"path":"r-markdown.html","id":"r-markdown","chapter":"25 R Markdown","heading":"25 R Markdown","text":"","code":""},{"path":"containers.html","id":"containers","chapter":"26 Containers","heading":"26 Containers","text":"","code":""}]
